{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/core/Ajax.js","sf.min.js","src/core/BaseDOMConstructor.js","src/core/DomMutations.js","src/core/Events.js","src/core/InstancesController.js","src/core/ajax/baseActions.js","src/core/events/baseEvents.js","src/helpers/DOMEvents.js","src/helpers/LikeFormData.js","src/helpers/domTools.js","src/helpers/tools.js","src/helpers/tools/iterateInputs.js","src/index.js","src/instances/form/Form.js","src/instances/form/formMessages.js","src/instances/lock/Lock.js","src/sf.js","src/shim/Object.assign.js","src/shim/console.js","src/vendor/formToObject.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","tools","Events","LikeFormData","Ajax","options","this","currentRequests","events","headers","extend","prototype","X-Requested-With","send","that","data","method","xhr","ajaxPromise","Promise","resolve","reject","url","console","error","oldIE","window","XDomainRequest","XMLHttpRequest","undefined","responseType","indexOf","onprogress","onProgress","upload","addEventListener","event","lengthComputable","loaded","total","open","onload","ans","_parseJSON","status","response","trigger","onerror","dataToSend","JSON","stringify","toString","getContentTypeHeader","_setHeaders","isReturnXHRToo","sendRequest","header","setRequestHeader","responseText","ret","contentType","getResponseHeader","toLowerCase","parse","match","parseInt","statusText","warn","../core/Events","../helpers/LikeFormData","../helpers/tools",2,"BaseDOMConstructor","init","sf","node","Object","assign","grabOptions","optionsToGrab","currentOptionValue","currentOption","option","hasOwnProperty","value","instances","name","attributes","domAttr","processor","getAddon","addonType","addonName","spiral","instancesController","getInstanceAddon",3,"DomMutations","constructor","config","childList","characterData","characterDataOldValue","subtree","attributeOldValue","attributeFilter","observer","MutationObserver","onDomMutate","apply","arguments","observe","document","mutations","classArray","getClasses","classSelector","join","forEach","mutation","type","processMutationAttributes","processMutationChildList","addedNodes","removedNodes","currentClasses","target","className","split","oldClasses","oldValue","addedClasses","filter","val","removedClasses","addedRegisteredClasses","removedRegisteredClasses","removeInstance","getInstanceNameByCssClass","addInstance","nodesList","action","checkNode","classList","contains","nodeType","nodeName","querySelectorAll","stopObserve","disconnect",4,"allowedEvents","_storage","_allowedEvents","on","callback","eventArr","replace","push","registerAction","off","alert","performAction",5,"InstancesController","instancesConstructors","cssClasses","jsConstructors","addons","registerInstanceType","constructorFunction","cssClassName","isSkipInitialization","instanceName","nodes","getElementsByClassName","max","addInstanceType","instanceConstructor","isAlreadyAdded","getInstance","instance","key","instanceObj","die","splice","isReturnObject","typeArr","HTMLElement","getElementById","registerAddon","addon","keys","cssClass","getInstanceConstructors",6,"ajax","delay","setTimeout",7,"location","test","reload","close",8,"DOMEvents","_DOMEventsStorage","add","eventArray","useCapture","DOMNode","eventType","eventFunction","remove","removeAll","removeEventListener",9,"boundary","Math","random","substr","append","retString","iterate","partOfKey","get","getAll","has","set",10,"closest","elem","selectors","matchesSelector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","parentNode","closestByClassName","reg","RegExp",11,"attribute","retObj",12,"findNodes","context","names","prefix","partOfSelector","selector","el","sel","notFound","obj","iterateInputs","log",13,"_sf","core","domMutation","csrfToken","X-CSRF-Token","modules","helpers","./core/ajax/baseActions.js","./core/events/baseEvents.js","./helpers/tools/iterateInputs.js","./instances/form/Form.js","./instances/lock/Lock.js","./sf","./shim/Object.assign","./shim/console","./vendor/formToObject",14,"formMessages","Form","_construct","create","mixMessagesOptions","addEvents","self","lockType","messagesType","messages","useAjax","ajaxCallback","beforeSubmitCallback","afterSubmitCallback","Accept","global","form","defaults","onSubmit","preventDefault","stopPropagation","removeMessages","getFormData","FormData","lock","showFormMessage","showFieldMessage","showFieldsMessages","showMessages","removeMessage","processAnswer","answer","sendOptions","fn","eval","then","formToObject","setOptions","opt","./formMessages",15,"prepareMessageObject","message","text","domTools","template","place","levels","success","info","warning","field","fieldTemplate","fieldClose","fieldPlace","fieldPrefix","debug","notice","danger","critical","emergency","isMsg","errors","warnings","_messages","m","closeHandler","bind","removeChild","msgEl","parent","tpl","parser","DOMParser","item","parseFromString","firstChild","lastChild","appendChild","insertBefore","querySelector","../../helpers/domTools","../../helpers/tools/iterateInputs",16,"Lock","types","createElement","innerHTML","html","progress","sfLock","spinner","current","style","width",17,"WILL_BE_DEPRECATED","./core/Ajax","./core/BaseDOMConstructor","./core/DomMutations","./core/Events","./core/InstancesController","./helpers/DOMEvents","./helpers/LikeFormData","./helpers/domTools","./helpers/tools",18,"TypeError","output","index","source","nextKey",19,"noop","methods",20,"formRef","keyRegex","$form","$formElements","formObj","setForm","setFormElements","setFormObj","isDomNode","arr","addChild","result","domNode","checked","DOMchilds","child","disabled","define","amd"],"mappings":"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","file":"sf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\n\r\nvar tools = require(\"../helpers/tools\");\r\nvar Events = require(\"../core/Events\");\r\nvar LikeFormData = require(\"../helpers/LikeFormData\");\r\n/**\r\n * This is an Ajax transport.\r\n * Supports  XDomainRequest for old IE\r\n * @param {Object} [options]\r\n * @param {Object} [options.headers] Headers to add to the instance\r\n * @fires beforeSend event that will be performed before request is send. Event called with one parameter \"options\", that contains all variables for Ajax\r\n * @constructor\r\n */\r\nvar Ajax = function (options) {\r\n    this.currentRequests = 0;\r\n    this.events = new Events([\"beforeSend\", 'load']);\r\n\r\n    if (options && options.headers) {\r\n        this.headers = tools.extend(this.headers, options.headers);\r\n    }\r\n};\r\n\r\n/**\r\n * Default headers. You can overwrite it. Look at the event beforeSend\r\n * Please note that on XDomainRequest  we can't send any headers.\r\n * @type Object\r\n */\r\nAjax.prototype.headers = {\r\n    'X-Requested-With': 'XMLHttpRequest'\r\n};\r\n\r\n/**\r\n * Send ajax request to server\r\n * Will return promise or array with promise and XMLHttpRequest : {window.Promise|[window.Promise,XMLHttpRequest]}\r\n * @since 0.4.0\r\n * @param {Object} options object with options\r\n * @param {String} options.url url to send data\r\n * @param {Object|String} [options.data] data to send\r\n * @param {String} [options.method]\r\n * @param {Object} [options.headers] headers to add to the request\r\n * @param {Function} [options.onProgress] callback function on progress. Two callback options: current bytes sent,totalBytes\r\n * @param {Function} [options.isReturnXHRToo===false] should method return array instead of Promise. Some times is needed to control ajax (abort, etc). If tree then  [window.Promise,XMLHttpRequest ] will be returned\r\n * @returns {Promise|Array}\r\n */\r\nAjax.prototype.send = function (options) {\r\n    var that = this;\r\n\r\n    //TODO why we check here if data === null then reassign to null again?\r\n    if (options.data === null || options.data === void 0 || options.data === 'undefined') {\r\n        options.data = null;\r\n    }\r\n    if (!options.method) {\r\n        options.method = \"POST\"\r\n    }\r\n\r\n    options.headers = options.headers ? tools.extend(this.headers, options.headers) : this.headers;\r\n    var xhr;\r\n    var ajaxPromise =  new Promise(function (resolve, reject) {    // Return a new promise.\r\n        if (!options.url) {\r\n            console.error(\"You should provide url\");\r\n            reject(\"You should provide url\");\r\n        }\r\n        that.currentRequests++;\r\n\r\n        var oldIE = false;\r\n\r\n        if ((typeof window !== 'undefined') && window.XDomainRequest && (window.XMLHttpRequest && new XMLHttpRequest().responseType === undefined) && (url.indexOf(\"http\") === 0)) {//old IE CORS\r\n            //TODO maybe we should use XDomainRequest only for cross domain requests? But  Spiral for now works great with XDomainRequest (based on IEJSON)\r\n            xhr = new XDomainRequest();\r\n            //http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\r\n            oldIE = true;\r\n            //http://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\r\n            xhr.onprogress = function (e) {\r\n                //TODO adjust options\r\n                options.onProgress && options.onProgress(e);\r\n            };\r\n        } else {\r\n            xhr = new XMLHttpRequest();\r\n            if (options.onProgress) {\r\n                xhr.upload.addEventListener(\"progress\", function (event) {\r\n                    if (event.lengthComputable) {\r\n                        options.onProgress(event.loaded, event.total);\r\n                    }\r\n                }, false);\r\n            }\r\n\r\n        }\r\n\r\n\r\n        xhr.open(options.method, options.url);\r\n\r\n        xhr.onload = function () {//On loaded\r\n            that.currentRequests--;\r\n            var ans = that._parseJSON(xhr);\r\n            if (ans.status) {\r\n                if (ans.status > 199 && ans.status < 300) {//200-299\r\n                    resolve(ans);\r\n                } else if (ans.status > 399 && ans.status < 600) {//400-599\r\n                    reject(ans);\r\n                } else {\r\n                    console.error(\"unknown status %d. Rejecting\", ans.status);\r\n                    reject(ans);\r\n                }\r\n\r\n            } else if (oldIE) {\r\n                resolve(ans);//OLD IE + downloading file is producing  no status.\r\n            } else {\r\n                reject(ans);//reject with the status text\r\n            }\r\n            options.response = ans;\r\n            that.events.trigger(\"load\", options);//for example - used to handle actions\r\n        };\r\n        xhr.onerror = function () {// Handle network errors\r\n            that.currentRequests--;\r\n            reject(Error(\"Network Error\"), xhr);\r\n        };\r\n\r\n        that.events.trigger(\"beforeSend\", options);//you can modify \"options\" object inside event (like adding you headers,data,etc)\r\n\r\n        var dataToSend;\r\n        if (options.data !== null) {//if data to send is not empty\r\n            if (!oldIE) {\r\n                if (options.data.toString().indexOf(\"FormData\") !== -1) {//if form data\r\n                    dataToSend = options.data;\r\n                } else {\r\n                    dataToSend = new LikeFormData(options.data);\r\n                    options.headers[\"content-type\"] = dataToSend.getContentTypeHeader();\r\n                }\r\n                that._setHeaders(xhr, options.headers);\r\n\r\n            } else {\r\n                dataToSend = \"IEJSON\" + JSON.stringify(options.data);\r\n            }\r\n        } else {//else send empty data\r\n            dataToSend = null;\r\n        }\r\n\r\n\r\n//        if (!oldIE) {\r\n//            //xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\r\n//            dataToSend = new spiral.LikeFormData(data, xhr, oldIE);\r\n//        } else {\r\n//            if (data !==null && data !== void 0 && data !== 'undefined'){\r\n//                dataToSend = \"IEJSON\"+JSON.stringify(data);\r\n//            } else {\r\n//                 dataToSend =data;\r\n//            }\r\n//\r\n//        }\r\n\r\n\r\n        try {//working around FF bug\r\n            xhr.send(dataToSend);// Make the request\r\n        } catch (e) {\r\n            //console.error(\"error sending trying another method\");\r\n            xhr.send(dataToSend.toString());\r\n        }\r\n\r\n        return xhr;\r\n    });\r\n\r\n    if (options.isReturnXHRToo){//return xhr too\r\n        return [ajaxPromise,xhr]\r\n    }\r\n    return ajaxPromise;\r\n};\r\n\r\n\r\n/**\r\n * Please use send instead of sendRequest\r\n * @deprecated 3.0.0\r\n * @remove 3.1.0\r\n * //TODO remove in ver 3.1.0\r\n */\r\nAjax.prototype.sendRequest = Ajax.prototype.send;\r\n\r\n\r\n/**\r\n * Iterate over headers object and call xhr.setRequestHeader\r\n * @param {XMLHttpRequest} xhr\r\n * @param {Object} headers object with headers to set\r\n */\r\nAjax.prototype._setHeaders = function (xhr, headers) {\r\n    for (var header in headers) {\r\n        xhr.setRequestHeader(header, headers[header]);\r\n    }\r\n\r\n};\r\n/**\r\n * Try to parse and normalize answer\r\n * @param xhr\r\n * @returns {*}\r\n * @private\r\n */\r\nAjax.prototype._parseJSON = function (xhr) {\r\n    if (!xhr.response) {\r\n        xhr.response = xhr.responseText;\r\n    }\r\n    var ret = {};\r\n    var contentType = false;\r\n    if (xhr.getResponseHeader) {\r\n        contentType = xhr.getResponseHeader(\"Content-Type\");\r\n    }\r\n\r\n    if (!contentType || contentType.toLowerCase() === 'application/json' || contentType.toLowerCase() === 'text/json' || contentType.toLowerCase() === 'inode/symlink') {//application/json or inode/symlink  (AmazonS3 bug? )\r\n        try {\r\n            ret = JSON.parse(xhr.response);\r\n        } catch (e) {\r\n            console.error(\"Not a JSON!\", xhr.response);\r\n            ret = {data: xhr.response};\r\n        }\r\n    } else {\r\n        ret = {data: xhr.response};\r\n    }\r\n\r\n    if (!ret.status) {\r\n        ret.status = xhr.status;\r\n    }\r\n    //Some servers can answer status in JSON as \"HTTP/1.1 200 OK\"  but we need a status number\r\n    if (typeof ret.status === 'string' && ret.status.indexOf(\"HTTP/\") === 0 && ret.status.match( / (\\d\\d\\d)/ )) {\r\n        ret.status = parseInt(ret.status.match( / (\\d\\d\\d)/ )[1]);//TODO check this code\r\n    }\r\n\r\n\r\n    if (!ret.statusText) {\r\n        ret.statusText = xhr.statusText;\r\n    }\r\n    if (xhr.status && xhr.status != ret.status) {\r\n        console.warn(\"Status from request %d, but response contains status %d\", xhr.status, ret.status)\r\n    }\r\n\r\n    return ret;\r\n\r\n};\r\n\r\n\r\nmodule.exports = Ajax;\r\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\r\n\r\nvar tools = require(\"../helpers/tools\");\r\nvar Events = require(\"../core/Events\");\r\nvar LikeFormData = require(\"../helpers/LikeFormData\");\r\n/**\r\n * This is an Ajax transport.\r\n * Supports  XDomainRequest for old IE\r\n * @param {Object} [options]\r\n * @param {Object} [options.headers] Headers to add to the instance\r\n * @fires beforeSend event that will be performed before request is send. Event called with one parameter \"options\", that contains all variables for Ajax\r\n * @constructor\r\n */\r\nvar Ajax = function (options) {\r\n    this.currentRequests = 0;\r\n    this.events = new Events([\"beforeSend\", 'load']);\r\n\r\n    if (options && options.headers) {\r\n        this.headers = tools.extend(this.headers, options.headers);\r\n    }\r\n};\r\n\r\n/**\r\n * Default headers. You can overwrite it. Look at the event beforeSend\r\n * Please note that on XDomainRequest  we can't send any headers.\r\n * @type Object\r\n */\r\nAjax.prototype.headers = {\r\n    'X-Requested-With': 'XMLHttpRequest'\r\n};\r\n\r\n/**\r\n * Send ajax request to server\r\n * Will return promise or array with promise and XMLHttpRequest : {window.Promise|[window.Promise,XMLHttpRequest]}\r\n * @since 0.4.0\r\n * @param {Object} options object with options\r\n * @param {String} options.url url to send data\r\n * @param {Object|String} [options.data] data to send\r\n * @param {String} [options.method]\r\n * @param {Object} [options.headers] headers to add to the request\r\n * @param {Function} [options.onProgress] callback function on progress. Two callback options: current bytes sent,totalBytes\r\n * @param {Function} [options.isReturnXHRToo===false] should method return array instead of Promise. Some times is needed to control ajax (abort, etc). If tree then  [window.Promise,XMLHttpRequest ] will be returned\r\n * @returns {Promise|Array}\r\n */\r\nAjax.prototype.send = function (options) {\r\n    var that = this;\r\n\r\n    //TODO why we check here if data === null then reassign to null again?\r\n    if (options.data === null || options.data === void 0 || options.data === 'undefined') {\r\n        options.data = null;\r\n    }\r\n    if (!options.method) {\r\n        options.method = \"POST\"\r\n    }\r\n\r\n    options.headers = options.headers ? tools.extend(this.headers, options.headers) : this.headers;\r\n    var xhr;\r\n    var ajaxPromise =  new Promise(function (resolve, reject) {    // Return a new promise.\r\n        if (!options.url) {\r\n            console.error(\"You should provide url\");\r\n            reject(\"You should provide url\");\r\n        }\r\n        that.currentRequests++;\r\n\r\n        var oldIE = false;\r\n\r\n        if ((typeof window !== 'undefined') && window.XDomainRequest && (window.XMLHttpRequest && new XMLHttpRequest().responseType === undefined) && (url.indexOf(\"http\") === 0)) {//old IE CORS\r\n            //TODO maybe we should use XDomainRequest only for cross domain requests? But  Spiral for now works great with XDomainRequest (based on IEJSON)\r\n            xhr = new XDomainRequest();\r\n            //http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\r\n            oldIE = true;\r\n            //http://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\r\n            xhr.onprogress = function (e) {\r\n                //TODO adjust options\r\n                options.onProgress && options.onProgress(e);\r\n            };\r\n        } else {\r\n            xhr = new XMLHttpRequest();\r\n            if (options.onProgress) {\r\n                xhr.upload.addEventListener(\"progress\", function (event) {\r\n                    if (event.lengthComputable) {\r\n                        options.onProgress(event.loaded, event.total);\r\n                    }\r\n                }, false);\r\n            }\r\n\r\n        }\r\n\r\n\r\n        xhr.open(options.method, options.url);\r\n\r\n        xhr.onload = function () {//On loaded\r\n            that.currentRequests--;\r\n            var ans = that._parseJSON(xhr);\r\n            if (ans.status) {\r\n                if (ans.status > 199 && ans.status < 300) {//200-299\r\n                    resolve(ans);\r\n                } else if (ans.status > 399 && ans.status < 600) {//400-599\r\n                    reject(ans);\r\n                } else {\r\n                    console.error(\"unknown status %d. Rejecting\", ans.status);\r\n                    reject(ans);\r\n                }\r\n\r\n            } else if (oldIE) {\r\n                resolve(ans);//OLD IE + downloading file is producing  no status.\r\n            } else {\r\n                reject(ans);//reject with the status text\r\n            }\r\n            options.response = ans;\r\n            that.events.trigger(\"load\", options);//for example - used to handle actions\r\n        };\r\n        xhr.onerror = function () {// Handle network errors\r\n            that.currentRequests--;\r\n            reject(Error(\"Network Error\"), xhr);\r\n        };\r\n\r\n        that.events.trigger(\"beforeSend\", options);//you can modify \"options\" object inside event (like adding you headers,data,etc)\r\n\r\n        var dataToSend;\r\n        if (options.data !== null) {//if data to send is not empty\r\n            if (!oldIE) {\r\n                if (options.data.toString().indexOf(\"FormData\") !== -1) {//if form data\r\n                    dataToSend = options.data;\r\n                } else {\r\n                    dataToSend = new LikeFormData(options.data);\r\n                    options.headers[\"content-type\"] = dataToSend.getContentTypeHeader();\r\n                }\r\n                that._setHeaders(xhr, options.headers);\r\n\r\n            } else {\r\n                dataToSend = \"IEJSON\" + JSON.stringify(options.data);\r\n            }\r\n        } else {//else send empty data\r\n            dataToSend = null;\r\n        }\r\n\r\n\r\n//        if (!oldIE) {\r\n//            //xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\r\n//            dataToSend = new spiral.LikeFormData(data, xhr, oldIE);\r\n//        } else {\r\n//            if (data !==null && data !== void 0 && data !== 'undefined'){\r\n//                dataToSend = \"IEJSON\"+JSON.stringify(data);\r\n//            } else {\r\n//                 dataToSend =data;\r\n//            }\r\n//\r\n//        }\r\n\r\n\r\n        try {//working around FF bug\r\n            xhr.send(dataToSend);// Make the request\r\n        } catch (e) {\r\n            //console.error(\"error sending trying another method\");\r\n            xhr.send(dataToSend.toString());\r\n        }\r\n\r\n        return xhr;\r\n    });\r\n\r\n    if (options.isReturnXHRToo){//return xhr too\r\n        return [ajaxPromise,xhr]\r\n    }\r\n    return ajaxPromise;\r\n};\r\n\r\n\r\n/**\r\n * Please use send instead of sendRequest\r\n * @deprecated 3.0.0\r\n * @remove 3.1.0\r\n * //TODO remove in ver 3.1.0\r\n */\r\nAjax.prototype.sendRequest = Ajax.prototype.send;\r\n\r\n\r\n/**\r\n * Iterate over headers object and call xhr.setRequestHeader\r\n * @param {XMLHttpRequest} xhr\r\n * @param {Object} headers object with headers to set\r\n */\r\nAjax.prototype._setHeaders = function (xhr, headers) {\r\n    for (var header in headers) {\r\n        xhr.setRequestHeader(header, headers[header]);\r\n    }\r\n\r\n};\r\n/**\r\n * Try to parse and normalize answer\r\n * @param xhr\r\n * @returns {*}\r\n * @private\r\n */\r\nAjax.prototype._parseJSON = function (xhr) {\r\n    if (!xhr.response) {\r\n        xhr.response = xhr.responseText;\r\n    }\r\n    var ret = {};\r\n    var contentType = false;\r\n    if (xhr.getResponseHeader) {\r\n        contentType = xhr.getResponseHeader(\"Content-Type\");\r\n    }\r\n\r\n    if (!contentType || contentType.toLowerCase() === 'application/json' || contentType.toLowerCase() === 'text/json' || contentType.toLowerCase() === 'inode/symlink') {//application/json or inode/symlink  (AmazonS3 bug? )\r\n        try {\r\n            ret = JSON.parse(xhr.response);\r\n        } catch (e) {\r\n            console.error(\"Not a JSON!\", xhr.response);\r\n            ret = {data: xhr.response};\r\n        }\r\n    } else {\r\n        ret = {data: xhr.response};\r\n    }\r\n\r\n    if (!ret.status) {\r\n        ret.status = xhr.status;\r\n    }\r\n    //Some servers can answer status in JSON as \"HTTP/1.1 200 OK\"  but we need a status number\r\n    if (typeof ret.status === 'string' && ret.status.indexOf(\"HTTP/\") === 0 && ret.status.match( / (\\d\\d\\d)/ )) {\r\n        ret.status = parseInt(ret.status.match( / (\\d\\d\\d)/ )[1]);//TODO check this code\r\n    }\r\n\r\n\r\n    if (!ret.statusText) {\r\n        ret.statusText = xhr.statusText;\r\n    }\r\n    if (xhr.status && xhr.status != ret.status) {\r\n        console.warn(\"Status from request %d, but response contains status %d\", xhr.status, ret.status)\r\n    }\r\n\r\n    return ret;\r\n\r\n};\r\n\r\n\r\nmodule.exports = Ajax;\r\n\n},{\"../core/Events\":4,\"../helpers/LikeFormData\":9,\"../helpers/tools\":11}],2:[function(require,module,exports){\n\"use strict\";\r\n\r\n/**\r\n * This a base constructor (class) for any DOM based instance.\r\n * This constructor just grab all node attributes and generates options. All processed options stored at this.options\r\n * @example\r\n * We have html like this:\r\n * <div data-test=\"testValue\" data-value=\"value123\">.....</div>\r\n * this.options will be:\r\n * {\r\n *  test:\"testValue\",\r\n *  value:\"value\"\r\n * }\r\n * Note: data-test and data-value should be described in attributesToGrab\r\n * @constructor\r\n */\r\nvar BaseDOMConstructor = function () {\r\n};\r\n/**\r\n * Init method. Call after construct instance\r\n * @param {Object} sf\r\n * @param {Object} node  DomNode of form\r\n * @param {Object} [options] all options to override default\r\n */\r\nBaseDOMConstructor.prototype.init = function (sf, node, options) {\r\n    //TODO data-spiral-JSON\r\n    this.sf = sf;\r\n    this.node = node;\r\n    //if (sf.options && sf.options.instances && sf.options.instances[this.name]) {\r\n    //    options = Object.assign(options || {}, sf.options.instances[this.name]);\r\n    //}\r\n    this.options = Object.assign(this.grabOptions(node), options);\r\n};\r\n\r\n/**\r\n * This is a options to generate.\r\n * You should provide processor or value.\r\n * @type {Object}\r\n * @property {Object} propertyKey - object of property\r\n * @property {String} propertyKey.value - default value to return\r\n * @property {String} [propertyKey.domAttr] - dom attribute to grab data\r\n * @property {Function} [propertyKey.processor] -  processor to process data before return\r\n * @property {Object}  ... - Another object of one property\r\n * @type {{}}\r\n *  @example\r\n * \"someAttribute\": {// key\r\n *      value: true, //default Value\r\n *      domAttr: \"data-some-attribute\", // attribute from node to grab\r\n *      processor: function (node,val,self) { //processor to process values before return\r\n *          //some calculations\r\n *      return someValue;\r\n *      }\r\n *  },\r\n *  \"anotherAttribute\":{...},\r\n *  \"...\"\r\n *\r\n *  @example\r\n *  //return node as value\r\n *  \"context\": {\r\n *      \"processor\": function (node,val,key) { //processor\r\n *          return node;\r\n *      }\r\n *  },\r\n *  \"Another-key\":{...},\r\n *  \"...\"\r\n * @example\r\n * //Grab attribute \"data-attribute\" as \"MyAttribute\" if attribute not provided return \"DefaultValue\"\r\n * // Dom node <div data-attribute=\"someValue\"></div>\r\n * \"MyAttribute\": {\r\n *      value: \"DefaultValue\",\r\n *      domAttr: \"data-attribute\"\r\n *  }\r\n *  //after processing we should have\r\n *  {\"MyAttribute\":\"someValue\"}\r\n *\r\n *  @example\r\n * //Grab attribute \"data-attribute\" as \"MyAttribute\" and return some value instead\r\n * //Dom node  <div data-attribute=\"someValue\"></div>\r\n * \"MyAttribute\": {\r\n *      domAttr: \"data-attribute\",\r\n *      processor: function (node,val,self) {\r\n *          return val+\"SomeCalculation\";\r\n *      }\r\n *  }\r\n *  //after processing we should have\r\n *  {\"MyAttribute\":\"someValueSomeCalculation\"}\r\n *\r\n * @example\r\n * //return function as value\r\n * processAnswer: {\r\n *      \"value\": function (options) {\r\n *         return \"someVal\";\r\n *      }\r\n *  //after processing we should have\r\n *  {\"processAnswer\":function (options) {\r\n *         return \"someVal\";\r\n *      }\r\n *   }\r\n *\r\n * @example\r\n * //return init time as value\r\n * initTime: {\r\n *      \"processor\": function (node,val,self) {\r\n *         return new Date().getTime;\r\n *      }\r\n *  //after processing we should have\r\n *  {\"initTime\":1429808977404}\r\n * @example\r\n * //return other value instead of real one\r\n * processAnswer: {\r\n *      \"processor\": function (node,val,self) {\r\n *         return \"someVal\";\r\n *      }\r\n *  //after processing we should have\r\n *  {\"processAnswer\":\"someVal\"}\r\n */\r\nBaseDOMConstructor.prototype.optionsToGrab = {};\r\n\r\n/**\r\n * Grab all options that described in optionsToGrab\r\n * @param {Object} node domNode\r\n * @return {Object}\r\n */\r\nBaseDOMConstructor.prototype.grabOptions = function (node) {\r\n    var options = {};\r\n    var currentOptionValue;\r\n    var currentOption;\r\n    for (var option in this.optionsToGrab) {\r\n        currentOptionValue = null;\r\n        if (this.optionsToGrab.hasOwnProperty(option)) {//if this is own option\r\n            currentOption = this.optionsToGrab[option];\r\n            if (currentOption.hasOwnProperty(\"value\")) {//we have default option. Let's grab it for first\r\n                currentOptionValue = currentOption.value;\r\n            }\r\n\r\n            if (this.sf.options.instances[this.name] && this.sf.options.instances[this.name].hasOwnProperty(option)) {\r\n                currentOptionValue = this.sf.options.instances[this.name][option]\r\n            }\r\n\r\n            if (currentOption.hasOwnProperty(\"domAttr\") && node.attributes.hasOwnProperty(currentOption.domAttr)) {//we can grab the attribute of node\r\n                currentOptionValue = node.attributes[currentOption.domAttr].value;\r\n            }\r\n\r\n            if (currentOption.hasOwnProperty(\"processor\")) {//we have processor. Let's execute it\r\n                currentOptionValue = currentOption.processor.call(this, node, currentOptionValue, currentOption);\r\n            }\r\n\r\n            if (currentOptionValue !== null) {\r\n                options[option] = currentOptionValue;\r\n            }\r\n\r\n        }\r\n    }\r\n    return options;\r\n};\r\n\r\n/**\r\n * Get addon for instance\r\n * @param {String} addonType type of addon (message,fill,etc)\r\n * @param {String} addonName name of addon\r\n */\r\nBaseDOMConstructor.prototype.getAddon = function (addonType, addonName) {\r\n    return this.spiral.instancesController.getInstanceAddon(this.name, addonType, addonName);\r\n};\r\n\r\nmodule.exports = BaseDOMConstructor;\r\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\r\n/**\r\n * Dom mutation. Listening to the DOM and add or remove instances based on classes.\r\n * @param {Object} instancesController  spiral instancesController.\r\n * @param {Function} instancesController.getClasses  get all registered modules classes.\r\n * @param {Function} instancesController.addInstance  add instance method.\r\n * @param {Function} instancesController.removeInstance  remove instance method\r\n * @constructor\r\n */\r\nvar DomMutations = function (instancesController) {\r\n    if (!instancesController){\r\n        console.error(\"You should provide instancesController  for DOM Mutation. Because DOM Mutation  should known all classes and\");\r\n        return;\r\n    }\r\n    if (!this.constructor){\r\n        console.error(\"Please call DomMutations with new  - 'new DomMutations()' \");\r\n        return;\r\n    }\r\n    this.instancesController = instancesController;\r\n    var config = {//config for MutationObserver\r\n            attributes: true,\r\n            childList: true,\r\n            characterData: true,\r\n            characterDataOldValue: true,\r\n            subtree: true,\r\n            attributeOldValue: true,\r\n            attributeFilter: [\"class\"]\r\n        },\r\n        that = this;\r\n    this.observer = new MutationObserver(function () {//call function when dom mutated.\r\n        that.onDomMutate.apply(that, arguments)\r\n    });\r\n    this.observer.observe(document, config);//start observer\r\n\r\n};\r\n/**\r\n * When dom mutated this function id executed.\r\n * @param {Array} mutations array of mutations\r\n * @returns {boolean}\r\n */\r\nDomMutations.prototype.onDomMutate = function (mutations) {\r\n    var classArray = this.instancesController.getClasses();//get all registered classes\r\n    var classSelector = \".\" + classArray.join(\",.\");//convert for querySelectorAll()\r\n    if (classSelector.length === 1) {//if not registered any instanceTypes\r\n        return false;\r\n    }\r\n    mutations.forEach(function (mutation) {//loop over mutation array\r\n        switch (mutation.type) {\r\n            case \"attributes\":\r\n                this.processMutationAttributes(mutation, classArray);\r\n                break;\r\n\r\n            case \"characterData\":\r\n\r\n                break;\r\n\r\n            case \"childList\":\r\n                this.processMutationChildList(mutation.addedNodes, \"addInstance\", classSelector, classArray);\r\n                this.processMutationChildList(mutation.removedNodes, \"removeInstance\", classSelector, classArray);\r\n                break;\r\n\r\n            case \"default\":\r\n                console.error(\"Something wrong. Contact tech support\");\r\n        }\r\n    }, this);\r\n    return true;\r\n};\r\n\r\n\r\n\r\nDomMutations.prototype.processMutationAttributes = function (mutation, classArray) {\r\n    var that = this;\r\n    var currentClasses = mutation.target.className.split(\" \"),\r\n        oldClasses = (mutation.oldValue)?mutation.oldValue.split(\" \"):[],\r\n        addedClasses = currentClasses.filter(function (val) {\r\n            return (oldClasses.indexOf(val) === -1);\r\n        }),\r\n        removedClasses = oldClasses.filter(function (val) {\r\n            return (currentClasses.indexOf(val) === -1);\r\n        }),\r\n        addedRegisteredClasses = addedClasses.filter(function (val) {\r\n            return (classArray.indexOf(val) !== -1);\r\n        }),\r\n        removedRegisteredClasses = removedClasses.filter(function (val) {\r\n            return (classArray.indexOf(val) !== -1);\r\n        });\r\n    removedRegisteredClasses.forEach(function (val) {\r\n        that.instancesController.removeInstance(that.instancesController.getInstanceNameByCssClass(val), mutation.target);\r\n    });\r\n    addedRegisteredClasses.forEach(function (val) {\r\n        that.instancesController.addInstance(that.instancesController.getInstanceNameByCssClass(val), mutation.target);\r\n    });\r\n\r\n};\r\n/**\r\n * Process mutation on ChildList\r\n * @param {NodeList} nodesList array with nodes\r\n * @param {String} action action to call (add or remove nodes)\r\n * @param {String} classSelector - string selector for querySelectorAll\r\n * @param {Array} classArray - array of all registered classes\r\n */\r\nDomMutations.prototype.processMutationChildList = function (nodesList, action, classSelector, classArray) {\r\n    var that =this;\r\n    /**\r\n     * Internal function for checking node class\r\n     * @param {Object} node dom node\r\n     */\r\n    function checkNode(node) {\r\n        classArray.forEach(function (className) {//loop over registered classes\r\n            if (node.classList.contains(className)) {//if class match try to add or remove instance for this node\r\n                that.instancesController[action](that.instancesController.getInstanceNameByCssClass(className), node);\r\n            }\r\n        });\r\n    }\r\n\r\n    [].forEach.call(nodesList, function (val) {//loop over mutation nodes\r\n        if (val.nodeType !== 1 || val.nodeName === \"SCRIPT\" || val.nodeName === \"LINK\") {//do not process other nodes then ELEMENT_NODE https://developer.mozilla.org/en-US/docs/Web/API/Node.nodeType also ignore SCRIPT and LINK tag\r\n            return false;\r\n        }\r\n        checkNode(val);//check mutation node\r\n        [].forEach.call(val.querySelectorAll(classSelector), checkNode);//query all nodes with required classes and check it\r\n        return true;\r\n    });\r\n\r\n};\r\n\r\n/**\r\n * Stop listening the dom changes\r\n */\r\nDomMutations.prototype.stopObserve = function () {\r\n    this.observer.disconnect();\r\n};\r\n\r\nmodule.exports = DomMutations;\r\n\r\n\r\n\n},{}],4:[function(require,module,exports){\n\"use strict\";\r\n\r\n/**\r\n * Events system.\r\n * @param {Array} allowedEvents array of allowed events.\r\n * @constructs Events\r\n * @example\r\n * //allow to work with all events\r\n * var events = new Events();\r\n * events.on(\"myBestEvent\",function(e){console.log(e)});\r\n * @example\r\n * //Allow to serve only limited events\r\n *  var events = new Events([\"beforeSubmit\",\"onDataReady\"]);\r\n *  events.on(\"myBestEvent\",function(e){console.log(e)});//will not works\r\n *  events.on(\"beforeSubmit\",function(e){console.log(e)});//will work\r\n */\r\nvar Events = function (allowedEvents) {\r\n    this._storage = {};\r\n    this._allowedEvents = allowedEvents;\r\n};\r\n\r\n/**\r\n * Add event(s)\r\n * @param {String} events event or space separated event list\r\n * @param {Function} callback callback function\r\n * @example\r\n * var events = new Events();\r\n * events.on(\"myBestEvent myBestEvent2 myBestEvent3\",function(e){console.log(e)});\r\n * events.on(\"myBestEvent\",function(e){console.log(e)});\r\n */\r\nEvents.prototype.on = function (events, callback) {\r\n    var eventArr = events.replace(/\\s{2,}/g, \" \").split(\" \");\r\n    eventArr.forEach(function(event){\r\n        if (this._allowedEvents  && this._allowedEvents.indexOf(event) === -1){// event not inside allowed events\r\n            console.warn(\"Events. Try to register event %s, but event is not allowed\",event);\r\n            return;\r\n        }\r\n        if (!this._storage.hasOwnProperty(events)) {\r\n            this._storage[event] = [];\r\n        }\r\n        this._storage[event].push(callback);\r\n    },this)\r\n\r\n};\r\n/**\r\n * Add action\r\n * @param {String} action\r\n * @param {Function} func\r\n * @deprecated  use \"on\" instead\r\n */\r\nEvents.prototype.registerAction = Events.prototype.on;\r\n\r\n\r\n/**\r\n * remove event\r\n * @param {String} event\r\n * @param {Function} callback\r\n */\r\nEvents.prototype.off = function (event, callback) {\r\n    alert(\"You try to remove action. This part is incomplete\");\r\n    //TODO\r\n};\r\n\r\n/**\r\n * Trigger event.\r\n * @param {String} event event name\r\n * @param {Object} [options] options to pass to the callback\r\n * @example\r\n * var events = new Events();\r\n * events.on(\"myBestEvent\",function(e){console.log(e.bestKey)});\r\n * events.trigger(\"myBestEvent\",{bestKey:42}); //will show in log\r\n */\r\nEvents.prototype.trigger = function (event, options) {\r\n    if (this._allowedEvents  && this._allowedEvents.indexOf(event) === -1){// event not inside allowed events\r\n        console.warn(\"Events. Try to trigger event %s, but event is not allowed\",event);\r\n        return;\r\n    }\r\n    if (this._storage.hasOwnProperty(event)) {\r\n        for (var n = 0, l = this._storage[event].length; n < l; n++) {\r\n            this._storage[event][n](options);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Perform action\r\n * @param {String} action\r\n * @param {Object} [actionParams] object with all action data from server\r\n * @param {Object} [options] ajax options\r\n * @deprecated use \"trigger\" instead\r\n */\r\nEvents.prototype.performAction = Events.prototype.trigger;\r\n\r\nmodule.exports = Events;\n},{}],5:[function(require,module,exports){\n\"use strict\";\r\n\r\n/**\r\n * Instance controller\r\n * @param spiral\r\n * @constructor\r\n */\r\nvar InstancesController = function (spiral) {\r\n    this.spiral = spiral;\r\n    if (!this.constructor){\r\n        console.error(\"Please call InstancesController with new  - 'new InstancesController()' \");\r\n        return;\r\n    }\r\n    this._storage = {\r\n        instancesConstructors: {\r\n            cssClasses:{},\r\n            jsConstructors:{}\r\n        },\r\n        addons: {},\r\n        instances: {}\r\n    };\r\n\r\n    //todo decide if we need this\r\n    //[\"onAddInstance\", \"onRemoveInstance\"]\r\n    //this.events = new spiral.modules.core.Events();\r\n};\r\n/**\r\n * Register new instance type\r\n * @param {Function} constructorFunction - constructor function of instance\r\n * @param {String} [cssClassName] - css class name of instance. If class not provided that it can't be automatically controlled by DomMutation. But you still can use it from JS.\r\n * @param {Boolean} [isSkipInitialization=false]  - skip component initialization, just adding, no init nodes.\r\n */\r\nInstancesController.prototype.registerInstanceType = function (constructorFunction, cssClassName, isSkipInitialization) {\r\n    var instanceName = constructorFunction.prototype.name;\r\n\r\n    if (!instanceName){\r\n        console.error(\"Instance constructor should have name inside it\");\r\n    }\r\n\r\n    if (this._storage.instancesConstructors.jsConstructors.hasOwnProperty(instanceName)){\r\n        console.error(\"Instance Constructor for type '%s' already added. Skipping\",instanceName);\r\n        return;\r\n    }\r\n\r\n    if (cssClassName){//add link (cssClassName->instanceName)\r\n        this._storage.instancesConstructors.cssClasses[cssClassName] = instanceName;\r\n    }\r\n\r\n    this._storage.instancesConstructors.jsConstructors[instanceName] = constructorFunction;\r\n\r\n\r\n\r\n    // if (this._storage.instancesConstructors.hasOwnProperty(className)){\r\n    //    console.error(\"Instance Constructor for type %s already added. Skipping\",constructorFunction.prototype.name);\r\n    //    return;\r\n    //}\r\n    //this._storage.instancesConstructors[className] = {//init storage fields\r\n    //    \"typeName\": constructorFunction.prototype.name,\r\n    //    \"constructor\": constructorFunction\r\n    //};\r\n    this._storage.instances[instanceName] = [];\r\n    if (!isSkipInitialization){\r\n        var nodes = document.getElementsByClassName(cssClassName);//init add nodes with this class\r\n        for (var i = 0, max = nodes.length; i < max; i++) {\r\n            this.addInstance(instanceName, nodes[i]);\r\n        }\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Old method to register instance type\r\n * @param className\r\n * @param constructorFunction\r\n * @param isSkipInitialization\r\n * @deprecated\r\n */\r\nInstancesController.prototype.addInstanceType =function(className,constructorFunction, isSkipInitialization){\r\n    console.warn(\"addInstanceType is deprecated. Please use registerInstanceType instead\");\r\n    return this.registerInstanceType(constructorFunction, isSkipInitialization);\r\n};\r\n\r\n\r\n/**\r\n * Add instance\r\n * @param {String} instanceName - name of instance\r\n * @param {Object} node - dom node\r\n * @param {Object} [options] all options for send to the constructor\r\n * @returns {boolean}\r\n */\r\nInstancesController.prototype.addInstance = function (instanceName, node, options) {\r\n    var instanceConstructor = this._storage.instancesConstructors.jsConstructors[instanceName],\r\n        isAlreadyAdded = this.getInstance(instanceName,node);\r\n    if (!instanceConstructor || isAlreadyAdded) {//if not found this type  or already added - return\r\n        return false;\r\n    }\r\n//    console.log(\"Adding instance for type -\",instanceName,\". Node - \",node);\r\n    var instance = new instanceConstructor(this.spiral,node, options);\r\n    this._storage.instances[instanceName].push({//add new instance of this type\r\n        \"node\": node,\r\n        \"instance\": instance\r\n    });\r\n\r\n    //this.events.trigger(\"onAddInstance\", instance);\r\n\r\n    return instance;\r\n};\r\n/**\r\n * Remove instance.\r\n * @param {String} instanceName - name of instance class\r\n * @param {Object|String} node - dom node ID\r\n * @returns {boolean}\r\n */\r\nInstancesController.prototype.removeInstance = function (instanceName, node) {\r\n    var instanceObj = this.getInstance(instanceName, node,true),\r\n        key;\r\n    if (!instanceObj) {\r\n        return false;\r\n    }\r\n    instanceObj.instance.die();//avoid memory leak\r\n    key = this._storage.instances[instanceName].indexOf(instanceObj);\r\n    if (key !== -1){//remove key\r\n        this._storage.instances[instanceName].splice(key, 1);\r\n    }\r\n    return true;\r\n};\r\n/**\r\n * Get instance. Return instance object of this dom node\r\n * @param {String} instanceName - name of instance\r\n * @param {Object|String} node - dom node o dome node ID\r\n * @param {boolean} [isReturnObject] - return object or instance\r\n * @returns {boolean}\r\n */\r\nInstancesController.prototype.getInstance = function (instanceName, node, isReturnObject) {//TODO isReturnObject not needed. Refactor and remove\r\n    var typeArr = this._storage.instances[instanceName],\r\n        ret = false;\r\n    if (!typeArr) {\r\n        return false;\r\n    }\r\n    node = (node instanceof HTMLElement) ? node : document.getElementById(node);\r\n    if (!node) {\r\n        return false;\r\n    }\r\n    for (var key = 0, l = typeArr.length; key < l; key++) {//iterate storage and try to find instance\r\n        if (typeArr[key].node === node) {\r\n            ret = (isReturnObject) ? typeArr[key] : typeArr[key].instance;\r\n            break;\r\n        }\r\n    }\r\n    return ret;\r\n};\r\n\r\n/**\r\n * Register addon for instance\r\n * @param {Function|Object} addon\r\n * @param {String} instanceName name of instance to register addon\r\n * @param {String} addonType type of addon (message,fill,etc)\r\n * @param {String} addonName name of addon (spiral, bootstrap,etc)\r\n */\r\nInstancesController.prototype.registerAddon = function(addon, instanceName, addonType, addonName){\r\n    if (!this._storage.addons.hasOwnProperty(instanceName)){\r\n        this._storage.addons[instanceName] = {};\r\n    }\r\n    if (!this._storage.addons[instanceName].hasOwnProperty(addonType)){\r\n        this._storage.addons[instanceName][addonType] = {};\r\n    }\r\n    if (this._storage.addons[instanceName][addonType].hasOwnProperty(addonName)){\r\n        console.error(\"The %s addon type %s already registered for instance %s! Skipping registration.\",addonName,addonType,instanceName);\r\n        return;\r\n    }\r\n    this._storage.addons[instanceName][addonType][addonName]= addon;\r\n\r\n};\r\n\r\n/**\r\n * Get registered addon\r\n * @param {String} instanceName name of instance to register addon\r\n * @param {String} addonType type of addon (message,fill,etc)\r\n * @param {String} addonName name of addon (spiral, bootstrap,etc)\r\n */\r\nInstancesController.prototype.getInstanceAddon =function(instanceName, addonType, addonName){\r\n    if (!this._storage.addons.hasOwnProperty(instanceName) || !this._storage.addons[instanceName].hasOwnProperty(addonType) || !this._storage.addons[instanceName][addonType].hasOwnProperty(addonName)){\r\n        return false;\r\n    }\r\n    return this._storage.addons[instanceName][addonType][addonName];\r\n};\r\n\r\n\r\n/**\r\n * Get all registered classes\r\n * @returns {Array}\r\n */\r\nInstancesController.prototype.getClasses = function (){\r\n    return Object.keys(this._storage.instancesConstructors.cssClasses);\r\n};\r\n\r\n/**\r\n * For given cssClass return name of instance\r\n * @param {String} cssClass\r\n * @return {*}\r\n */\r\nInstancesController.prototype.getInstanceNameByCssClass = function(cssClass){\r\n    return this._storage.instancesConstructors.cssClasses[cssClass];\r\n};\r\n\r\n/**\r\n * Get constructor by name or class name\r\n */\r\nInstancesController.prototype.getInstanceConstructors = function (name){\r\n\r\n   //TODO\r\n};\r\n\r\nmodule.exports = InstancesController;\r\n\n},{}],6:[function(require,module,exports){\n\"use strict\";\r\n\r\n/**\r\n * This plugin adds ability to perform actions from the server.\r\n * \"action\":\"reload\"\r\n * \"action\":{\"redirect\":\"/account\"}\r\n * \"action\":{\"redirect\":\"/account\",\"delay\":3000}\r\n * \"action\":{\"name\":\"redirect\",\"url\":\"/account\",\"delay\":3000}\r\n */\r\nmodule.exports = function (sf) {\r\n    sf.ajax.events.on('load', function (options) {\r\n        var response = options.response;\r\n        if (response.hasOwnProperty('action')) {\r\n            if (typeof response.action === 'string') {//\"action\":\"reload\"\r\n                sf.events.trigger(response.action);\r\n            } else if (typeof response.action === 'object') {\r\n                var keys = Object.keys(response.action);\r\n                if (keys.length === 1) {//\"action\":{\"redirect\":\"/account\"}\r\n                    sf.events.trigger(keys[0], response.action[keys[0]], options);\r\n                } else if (keys.length === 2 && response.action.delay) {//\"action\":{\"redirect\":\"/account\",\"delay\":3000}\r\n                    setTimeout(function () {\r\n                        var action = keys.filter(function (value) {\r\n                            return value !== 'delay';\r\n                        })[0];\r\n                        sf.events.trigger(action, response.action[action], options);\r\n                    }, +response.action.delay);\r\n                } else if (keys.length > 1) {//\"action\":{\"name\":\"redirect\",\"url\":\"/account\",\"delay\":3000}\r\n                    setTimeout(function () {\r\n                        sf.events.trigger(response.action.name, response.action, options);\r\n                    }, +response.action.delay || 0);\r\n                } else {\r\n                    console.error(\"Action from server. Object doesn't have keys. \", response.action);\r\n                }\r\n            } else {\r\n                console.error(\"Action from server. Something wrong. \", response.action);\r\n            }\r\n        }\r\n    });\r\n};\n},{}],7:[function(require,module,exports){\nmodule.exports = function(events){\r\n    events.on(\"redirect\", function (event) {\r\n        var url = Object.prototype.toString.call(event) === \"[object String]\" ? event : event.url;\r\n        //http://stackoverflow.com/questions/10687099/how-to-test-if-a-url-string-is-absolute-or-relative\r\n        window.location[/^(?:[a-z]+:)?\\/\\//i.test(url) ? 'href' : 'pathname'] = url;\r\n    });\r\n\r\n    events.on('reload', function () {\r\n        location.reload();\r\n    });\r\n\r\n    events.on('refresh', function () {\r\n        events.trigger('reload');\r\n    });\r\n\r\n    events.on('close', function () {\r\n        window.close();\r\n    });\r\n};\n},{}],8:[function(require,module,exports){\n\"use strict\";\r\n/**\r\n * Helper to manipulate DOM Events. It's a simple wrapper around \"addEventListener\" but it's store all functions and allow us to remove it all.\r\n * It's very helpful for die() method of instances\r\n * @TODO add to many nodes\r\n * @TODO new method like addEventListener  DOMEvents.on(node(s),event,callback,useCapture);\r\n * @constructor\r\n */\r\nvar DOMEvents = function(){\r\n    /**\r\n     * Internal storage for events\r\n     * @property {Array.<Object>} DOMEvents - dom events array\r\n     * @property {Object} DOMEvents.DOMNode -   DOM node\r\n     * @property {String} DOMEvents.eventType -   Event type\r\n     * @property {Function} DOMEvents.eventFunction -   Function\r\n     * @property {Boolean} DOMEvents.useCapture=false -   useCapture\r\n     * @property {Object} ... -   another object\r\n     * @private\r\n     */\r\n    this._DOMEventsStorage = [];\r\n};\r\n/**\r\n * Add event(s) to node(s).\r\n * @TODO add to many nodes\r\n * @param {Array.<Object>|Object} eventArray - event array or event itself\r\n * @param {Object} eventArray.DOMNode -   DOM node\r\n * @param {String} eventArray.eventType -   Event type\r\n * @param {Function} eventArray.eventFunction -   Function\r\n * @param {Boolean} [eventArray.useCapture=false] -   useCapture\r\n * @example\r\n * var DOMEventsInstance = new DOMEvents();\r\n * var eventOne = {\r\n *      DOMNode: document.getElementById(\"example\"),\r\n *      eventType: \"click\",\r\n *      eventFunction: function (e) {\r\n *          console.log(\"Hi there. Native  DOM events is:\",e);\r\n *      }\r\n * }\r\n *  var eventTwo = {\r\n *      DOMNode: document.getElementById(\"example2\"),\r\n *      eventType: \"mousedown\",\r\n *      eventFunction: function (e) {\r\n *          console.log(\"Hi there. mousedown event. Native  DOM events is:\",e);\r\n *      }\r\n * }\r\n *  DOMEventsInstance.add([eventOne,eventTwo]);\r\n */\r\nDOMEvents.prototype.add = function(eventArray){\r\n    if (Object.prototype.toString.call([]) !== \"[object Array]\"){\r\n        eventArray = [eventArray];\r\n    }\r\n    eventArray.forEach(function(val){\r\n        val.useCapture=!!(val.useCapture);\r\n        val.DOMNode.addEventListener(val.eventType,val.eventFunction,val.useCapture);\r\n        this._DOMEventsStorage.push(val);\r\n    },this)\r\n};\r\n/**\r\n * Remove events\r\n * @param {Array.<Object>} eventArray - event array\r\n * @param {Object} eventArray.DOMNode -   DOM node\r\n * @param {String} eventArray.eventType -   Event type\r\n * @param {Function} eventArray.eventFunction -   Function\r\n * @param {Boolean} [eventArray.useCapture=false] -   useCapture\r\n */\r\nDOMEvents.prototype.remove = function(eventArray){\r\n//TODO IMPLEMENT\r\n    // TODO не уверен что этот метод необходим. если надо часто убирать какието обработчики, то лучше поставить обработчки на родителя\r\n    console.warn(\"TODO IMPLEMENT\");\r\n\r\n};\r\n/**\r\n * Remove all dom events registered with this instance (added by method add)\r\n * @example\r\n * //look at add method as first part of this code\r\n * DOMEventsInstance.removeAll();\r\n */\r\nDOMEvents.prototype.removeAll = function(){\r\n    this._DOMEventsStorage.forEach(function(val){\r\n        val.DOMNode.removeEventListener(val.eventType,val.eventFunction,val.useCapture);\r\n    });\r\n    this._DOMEventsStorage=[];\r\n};\r\n\r\nmodule.exports = DOMEvents;\n},{}],9:[function(require,module,exports){\n\"use strict\";\r\n\r\n/**\r\n * This object try to be easy as FormData.\r\n * Please note this is not(!) a shim for Form data, because it's impossible (you should set headers for Ajax by hands)\r\n * It take object and can convert it string like FormData do. Then you can send this string by Ajax or do some other staff.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/FormData\r\n * @param {Object} [data] object with data (supports nested objects)\r\n * @param {String} [boundary] boundary  for Form Data\r\n * @constructor\r\n * @example\r\n * var formData = new LikeFormData({testKey:\"testValue\"},\"testBoundary\");\r\n * formData.toString();\r\n * // Returns:\r\n * //\"--testBoundary\r\n * //Content-Disposition: form-data; name=testKey\r\n * //\r\n * // testValue\r\n * //--testBoundary--\r\n * //\"\r\n *\r\n * @example\r\n * var formData = new LikeFormData({testKey:\"testValue\"});\r\n * formData.toString();\r\n * // Returns:\r\n * //\"--SpiralFormData-4935309085994959\r\n * //Content-Disposition: form-data; name=testKey\r\n * //\r\n * // testValue\r\n * //--SpiralFormData-4935309085994959--\r\n * //\"\r\n *\r\n * @example\r\n * var formData = new LikeFormData({testKey:\"testValue\"});\r\n * formData.append(\"key2\",\"val2\");\r\n * formData.toString();\r\n * // Returns:\r\n * //--SpiralFormData-988681384595111\r\n * //Content-Disposition: form-data; name=testKey\r\n * //\r\n * //testValue\r\n * //--SpiralFormData-988681384595111\r\n * //Content-Disposition: form-data; name=key2\r\n * //\r\n * //val2\r\n * //--SpiralFormData-988681384595111--\r\n * //\"\r\n */\r\nvar LikeFormData = function (data, boundary) {\r\n    this.data = {};\r\n    if (data) {\r\n        if (Object.prototype.toString.call(data) !== \"[object Object]\") {//non object/ Alert developer\r\n            console.warn(\"LikeFormData can't accept non Object. Please reefer to documentation. Problem parameter is:\", data);\r\n        } else {\r\n            this.data = data;\r\n        }\r\n    }\r\n    this.boundary = (boundary) ? boundary : (\"SpiralFormData-\" + Math.random().toString().substr(2));\r\n\r\n\r\n    //if (!isOldIE) {\r\n    //    this.boundary = \"SpiralAjax-\" + Math.random().toString().substr(2);\r\n    //    //xhr.setRequestHeader(\"content-type\", \"multipart/form-data; charset=utf-8; boundary=\" + this.boundary);\r\n    //} else {\r\n    //    this.boundary = \"SpiralAjax-oldIE9876gsloiHGldowu\";\r\n    //}\r\n\r\n};\r\n/**\r\n * Append data to storage. Like standart FormData do.\r\n * @param {String} key\r\n * @param {String} val\r\n * @example\r\n * var formData = new FormData();\r\n * formData.append(\"key2\",\"val2\");\r\n */\r\nLikeFormData.prototype.append = function (key, val) {\r\n    //https://developer.mozilla.org/en-US/docs/Web/API/FormData\r\n    //TODO ***Appends a new value**** onto an existing key inside a FormData object, or adds the key if it does not already exist.\r\n    this.data[key] = val;\r\n};\r\n\r\n/**\r\n * convert to string\r\n * @example\r\n * var formData = new LikeFormData({testKey:\"testValue\"});\r\n * formData.toString();\r\n * // Returns:\r\n * //\"--SpiralFormData-4935309085994959\r\n * //Content-Disposition: form-data; name=testKey\r\n * //\r\n * // testValue\r\n * //--SpiralFormData-4935309085994959--\r\n * //\"\r\n */\r\nLikeFormData.prototype.toString = function () {\r\n    var retString = \"\";\r\n    var boundary = this.boundary;\r\n    var iterate = function (data, partOfKey) {\r\n        for (var key in data) {\r\n            if (data.hasOwnProperty(key) && (typeof data[key] !== \"undefined\" )) {\r\n                if (typeof data[key] === \"object\") {\r\n                    iterate(data[key], ((partOfKey.length === 0) ? key : (partOfKey + \"[\" + key + \"]\")));\r\n                } else {\r\n                    retString += \"--\" + boundary\r\n                        + \"\\r\\nContent-Disposition: form-data; name=\" + ((partOfKey.length === 0) ? key : (partOfKey + \"[\" + key + \"]\"))\r\n                        + \"\\r\\n\\r\\n\" + data[key] + \"\\r\\n\";\r\n                }\r\n            }\r\n        }\r\n    };\r\n    if (typeof this.data !== \"object\") {\r\n        this.data = {\r\n            data: this.data\r\n        }\r\n    }\r\n    iterate(this.data, \"\");\r\n\r\n\r\n    retString += \"--\" + this.boundary + \"--\\r\\n\";\r\n    return retString;\r\n};\r\n\r\n/**\r\n * The delete() method of the FormData interface deletes a key/value pair from a FormData object.\r\n * @param key\r\n */\r\nLikeFormData.prototype.delete = function (key) {\r\n    return delete(this.data[key]);\r\n};\r\n\r\n\r\n/**\r\n *The get() method of the FormData interface returns the first value associated with a given key from within a FormData object.\r\n * @param key\r\n */\r\nLikeFormData.prototype.get = function (key) {\r\n    return this.data[key];\r\n};\r\n/**\r\n *The getAll() method of the FormData interface returns the first value associated with a given key from within a FormData object.\r\n */\r\nLikeFormData.prototype.getAll = function () {\r\n    return this.data;\r\n};\r\n\r\n/**\r\n * The has() method of the FormData interface returns a boolean stating whether a FormData object contains a certain key/value pair.\r\n * @param key\r\n */\r\nLikeFormData.prototype.has = function(key){\r\n    return this.data.hasOwnProperty(key);\r\n};\r\n\r\n/**\r\n * The difference between set() and FormData.append is that if the specified header does already exist, set() will overwrite the existing value with the new one, whereas FormData.append will append the new value onto the end of the set of values.\r\n * @param val\r\n */\r\nLikeFormData.prototype.set = function(val){\r\n    this.data[key] = val;\r\n};\r\n\r\n/**\r\n * Get content header to set for Ajax. Not a part of standart FormData object. But for sending Like FormData over Ajax you should know header.\r\n * @return {string}\r\n * @example\r\n * var formData = new LikeFormData();\r\n * formData.getContentTypeHeader(); //return \"multipart/form-data; charset=utf-8; boundary=SpiralFormData-988681384595111\"\r\n * @example\r\n * var formData = new LikeFormData({key:\"val2\"},\"testBoundary\");\r\n * formData.getContentTypeHeader(); //return \"multipart/form-data; charset=utf-8; boundary=testBoundary\"\r\n */\r\nLikeFormData.prototype.getContentTypeHeader = function () {\r\n    return \"multipart/form-data; charset=utf-8; boundary=\" + this.boundary;\r\n\r\n};\r\n\r\n\r\nmodule.exports = LikeFormData;\n},{}],10:[function(require,module,exports){\n/**\r\n This is a collection of useful DOM tools.\r\n */\r\n\r\nmodule.exports = {\r\n\r\n    /**\r\n     * Found first parent node with matched selector(s)\r\n     * @param {Object} elem - dom node\r\n     * @param {String|Array} selectors - selector or array of selectors\r\n     * @returns {Object| Boolean} - node or false\r\n     */\r\n\r\n    closest: function (elem, selectors) {\r\n        selectors = (typeof selectors === 'string') ? [selectors] : selectors;\r\n        var key,\r\n            l = selectors.length,\r\n            matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;\r\n        while (elem && elem.parentNode) {\r\n            for (key = 0; key < l; key++) {\r\n                if (matchesSelector.call(elem, selectors[key])) {\r\n                    return elem;\r\n                }\r\n            }\r\n            elem = elem.parentNode;\r\n        }\r\n        return false;\r\n    },\r\n    /**\r\n     * Found first parent node with matched className(s).\r\n     * TODO Why this? Because old IE....\r\n     * TODO It's not good, because it's a copy of closest @see closest. Refactor\r\n     * @param {Object} elem - dom node\r\n     * @param {String|Array} className - className or array of classNames\r\n     * @returns {Object| Boolean} - node or false\r\n     */\r\n\r\n    closestByClassName: function (elem, className) {\r\n        className = (typeof className === 'string') ? [className] : className;\r\n        var key,\r\n            l = className.length;\r\n        //,matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;\r\n        while (elem && elem.parentNode) {\r\n            for (key = 0; key < l; key++) {\r\n                var reg = new RegExp(\"(\\\\s|^)\" + className[key] + \"(\\\\s|$)\");\r\n                if (elem.className.match(reg)) {\r\n                    return elem;\r\n                }\r\n            }\r\n            elem = elem.parentNode;\r\n        }\r\n        return false;\r\n    }\r\n};\n},{}],11:[function(require,module,exports){\n\"use strict\";\r\n\r\n/**\r\n * @module tools\r\n * @namespace\r\n */\r\nvar tools = {\r\n    /**\r\n     * Merge multiple object into one object. Method will iterate over arguments and on conflict (key already exist in object) key will be overwrite\r\n     * @param {Array} arguments\r\n     * @param {Object} arguments.0 first object to merge\r\n     * @param {Object} arguments.1 second object to merge\r\n     * @param {Object} arguments.n n object to merge\r\n     * @returns {Object}\r\n     * @example\r\n     * var obj1 = {\r\n     *      key1:1\r\n     * }\r\n     * var obj2 = {\r\n     *      key2:2\r\n     * }\r\n     * extend(obj1,obj2);  //return object {key1:1,key2:2}\r\n     * @example\r\n     * var obj1 = {\r\n     *      key:1\r\n     * }\r\n     * var obj2 = {\r\n     *      key:2\r\n     * }\r\n     * extend(obj1,obj2);  //return object {key:2}\r\n     * @example\r\n     * var obj1 = {\r\n     *      key:1\r\n     * }\r\n     * var obj2 = {\r\n     *      key:2\r\n     * }\r\n     * var obj3 = {\r\n     *      key3:3\r\n     * }\r\n     * extend(obj1,obj2,obj3);  //return object {key:2,key3:3}\r\n     *\r\n     */\r\n    extend: function () {\r\n        var retObj = {};\r\n        var attribute;\r\n        for (var n = 0; n < arguments.length; n++) {\r\n            if (Object.prototype.toString.call(arguments[n]) !== \"[object Object]\") {\r\n                console.warn(\"Merging allowed only for objects. Passed value:\", arguments[n]);\r\n                continue;\r\n            }\r\n            for (attribute in arguments[n]) {\r\n                retObj[attribute] = arguments[n][attribute];\r\n            }\r\n        }\r\n        return retObj;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = tools;\n},{}],12:[function(require,module,exports){\n\"use strict\";\r\n//plugin in formMessages to iterate form inputs\r\n\r\n//todo comment all of this\r\n//todo ask @Systerr the reason of variable 'prefix'\r\nvar notFound = [];\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} context\r\n * @param {Object} names\r\n * @param {Function} callback\r\n * @param {String} [prefix]\r\n */\r\nfunction findNodes(context, names, callback, prefix) {\r\n    for (var name in names) {\r\n        if (!names.hasOwnProperty(name)) {\r\n            continue;\r\n        }\r\n\r\n        var partOfSelector = (prefix) ? prefix + \"[\" + name + \"]\" : name,\r\n            type = Object.prototype.toString.call(names[name]),\r\n            selector = \"[name='\" + partOfSelector + \"']\";\r\n        switch (type) {\r\n            case '[object Object]':\r\n                findNodes(context, names[name], callback, partOfSelector);//call recursive\r\n                break;\r\n            case '[object Array]':\r\n                names[name].forEach(function (el) {\r\n                    \"use strict\";\r\n                    //TODO refactor this should call recursive\r\n                    var sel = \"[name='\" + partOfSelector + \"[]']\" + \"[value='\" + el + \"']\";\r\n                    var nodes = context.querySelectorAll(sel);\r\n                    if (nodes.length === 0) {\r\n                        console.warn(sel, \" in Array not found\");\r\n                        notFound.push(sel);\r\n                    }\r\n                    for (var i = 0, max = nodes.length; i < max; i++) {\r\n                        callback(nodes[i], true);\r\n                    }\r\n                });\r\n                break;\r\n            case '[object String]':\r\n            case '[object Number]':\r\n                var nodes = context.querySelectorAll(selector);\r\n                if (nodes.length === 0) {\r\n                    console.warn(selector, \" not found\");\r\n                    var obj = {};\r\n                    obj[partOfSelector] = names[name];\r\n                    notFound.push(obj);\r\n                }\r\n                for (var i = 0, max = nodes.length; i < max; i++) {\r\n                    callback(nodes[i], names[name]);\r\n                }\r\n                break;\r\n\r\n            default :\r\n                console.error(\"unknown type -\", type, \" and message\", names[name]);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} context\r\n * @param {Object} names\r\n * @param {Function} callback\r\n * @param {String} [prefix]\r\n */\r\nvar iterateInputs = function (context, names, callback, prefix) {\r\n    notFound = [];\r\n    findNodes(context, names, callback, prefix);\r\n    if (notFound.length !== 0) {\r\n        console.log(\"Some element not found in form\", notFound);\r\n    }\r\n    return notFound;\r\n};\r\n\r\nmodule.exports = iterateInputs;\n},{}],13:[function(require,module,exports){\n\"use strict\";\r\n//https://github.com/spiral/sf.js\r\n\r\n//Add console shim for old IE\r\nrequire(\"./shim/console\");\r\nrequire(\"./shim/Object.assign\");\r\n\r\nvar _sf;\r\n\r\nif (typeof sf !== 'undefined' && Object.prototype.toString.call(sf) === \"[object Object]\") {\r\n    _sf = Object.assign(sf, require(\"./sf\"));\r\n} else {\r\n    _sf = require(\"./sf\");\r\n}\r\n\r\nif (!_sf.hasOwnProperty('options')) _sf.options = {instances:{}};\r\nif (!_sf.options.hasOwnProperty('instances')) _sf.options.instances = {};\r\n\r\n//todo delete this in future\r\nif (!window.hasOwnProperty(\"sf\")) {//bind only if  window.sf is empty to avoid conflicts with other libs\r\n    window.sf = _sf;\r\n}\r\n\r\n_sf.instancesController = new _sf.core.InstancesController(sf);\r\n_sf.domMutation = new _sf.core.DomMutations(_sf.instancesController);\r\n\r\n//Events system\r\n_sf.events = new _sf.core.Events();\r\nrequire(\"./core/events/baseEvents.js\")(_sf.events);\r\n\r\n//AJAX\r\n_sf.ajax = new _sf.core.Ajax(window.csrfToken ? {//TODO move to spiral bindings\r\n    headers: {\r\n        \"X-CSRF-Token\": window.csrfToken\r\n    }\r\n} : null);\r\nrequire(\"./core/ajax/baseActions.js\")(_sf);\r\n\r\n//Form\r\n_sf.tools.iterateInputs = require(\"./helpers/tools/iterateInputs.js\");\r\n_sf.modules.helpers.tools.iterateInputs = _sf.tools.iterateInputs;//todo remove\r\nrequire(\"./vendor/formToObject\");\r\nrequire(\"./instances/form/Form.js\");\r\nrequire(\"./instances/lock/Lock.js\");\r\n\r\nif (typeof exports === \"object\" && exports) {\r\n    module.exports = _sf;\r\n}\n},{\"./core/ajax/baseActions.js\":6,\"./core/events/baseEvents.js\":7,\"./helpers/tools/iterateInputs.js\":12,\"./instances/form/Form.js\":14,\"./instances/lock/Lock.js\":16,\"./sf\":17,\"./shim/Object.assign\":18,\"./shim/console\":19,\"./vendor/formToObject\":20}],14:[function(require,module,exports){\n\"use strict\";\r\n\r\n(function (sf) {\r\n    var formMessages = require(\"./formMessages\");\r\n\r\n    /**\r\n     * Spiral Forms\r\n     * @param {Object} sf\r\n     * @param {Object} node  DomNode of form\r\n     * @param {Object} [options] all options to override default\r\n     * @constructor Form\r\n     * @extends BaseDOMConstructor\r\n     */\r\n    var Form = function (sf, node, options) {\r\n        this._construct(sf, node, options);\r\n    };\r\n\r\n\r\n    /**\r\n     * @lends sf.Form.prototype\r\n     */\r\n    Form.prototype = Object.create(sf.modules.core.BaseDOMConstructor.prototype);\r\n\r\n    /**\r\n     * Name to register\r\n     * @type {string}\r\n     */\r\n    Form.prototype.name = \"form\";\r\n\r\n    /**\r\n     * Function that call on new instance is created.\r\n     * @param {Object} sf\r\n     * @param {Object} node  DomNode of form\r\n     * @param {Object} [options] all options to override default\r\n     * @private\r\n     */\r\n    Form.prototype._construct = function (sf, node, options) {\r\n        this.init(sf, node, options);//call parent\r\n        this.mixMessagesOptions();\r\n        //this.options.fillFrom && this.fillFieldsFrom();//id required to fill form\r\n\r\n        /**\r\n         * @extends DOMEvents\r\n         * @type {DOMEvents}\r\n         * @inheritDoc\r\n         * */\r\n        this.DOMEvents = new this.sf.modules.helpers.DOMEvents();\r\n        this.addEvents();\r\n\r\n        this.events = new this.sf.modules.core.Events([\"beforeSend\", \"success\", \"error\", \"always\"]);\r\n    };\r\n\r\n    /**\r\n     * @override\r\n     * @inheritDoc\r\n     * @enum {Object}\r\n     * @deprecated\r\n     */\r\n    Form.prototype.optionsToGrab = {\r\n        /**\r\n         * Link to form\r\n         */\r\n        \"context\": {\r\n            \"processor\": function (node, val) { //processor\r\n                return node;\r\n            }\r\n        },\r\n        /**\r\n         * Link to 'this'\r\n         */\r\n        self: {\r\n            \"processor\": function (node, val) {\r\n                return this;\r\n            }\r\n        },\r\n        /**\r\n         * URL to send form (if ajax form) <b>Default: \"/\"</b>\r\n         */\r\n        \"url\": {\r\n            \"domAttr\": \"action\",\r\n            \"value\": \"/\"\r\n        },\r\n        /**\r\n         * Method to send to send form (if ajax form) <b>Default: \"POST\"</b>\r\n         */\r\n        \"method\": {\r\n            \"domAttr\": \"method\",\r\n            \"value\": \"POST\"\r\n        },\r\n        /**\r\n         * Lock type when form sending <b>Default: \"default\"</b> @see sf.lock\r\n         */\r\n        \"lockType\": {\r\n            \"value\": \"default\",\r\n            \"domAttr\": \"data-lockType\"\r\n        },\r\n        /**\r\n         *\r\n         */\r\n        \"messagesType\": {\r\n            \"value\": \"spiral\",\r\n            \"domAttr\": \"data-messagesType\"\r\n        },\r\n        /**\r\n         * Pass custom template for form messages\r\n         */\r\n        \"messages\": {\r\n            \"value\": \"\",\r\n            \"domAttr\": \"data-messages\",\r\n            \"processor\": function (node, val, self) {\r\n                if (!val) return this.value;\r\n                if (typeof val == \"string\") {\r\n                    try {\r\n                        val = JSON.parse(val);\r\n                    } catch (e) {\r\n                        console.error(\"Form JSON.parse error: \", e);\r\n                    }\r\n                }\r\n                return Object.assign(self.value, val);\r\n            }\r\n        },\r\n        /**\r\n         * Use ajax to submit form <b>Default: true</b>\r\n         */\r\n        \"useAjax\": {// attribute of form\r\n            \"value\": true, //default value\r\n            \"domAttr\": \"data-useAjax\",\r\n            \"processor\": function (node, val) { // processor to process data before return\r\n                if (typeof val === \"boolean\") {\r\n                    return val;\r\n                }\r\n                val = (val !== void 0 && val !== null) ? val.toLowerCase() : '';\r\n                if (val === 'false') {\r\n                    val = false;\r\n                } else if (val === 'true') {\r\n                    val = true;\r\n                }\r\n                return val;\r\n            }\r\n        },\r\n        /**\r\n         * Callback after form submitting <b>Default: false</b>\r\n         * <br/>\r\n         * <b> Example </b>\r\n         * function(options){\r\n     *  //options contains all options after send\r\n     * }\r\n         */\r\n        \"ajaxCallback\": {// attribute of form\r\n            \"value\": false, //default value\r\n            \"domAttr\": \"data-callback\"\r\n        },\r\n        \"beforeSubmitCallback\": {// attribute of form\r\n            \"value\": false, //default value\r\n            \"domAttr\": \"data-before-submit\"\r\n        },\r\n        \"afterSubmitCallback\": {// attribute of form\r\n            \"value\": false, //default value\r\n            \"domAttr\": \"data-after-submit\"\r\n        },\r\n        \"headers\": {// attribute of form\r\n            \"value\": {\"Accept\": \"application/json\"}, //default value\r\n            \"domAttr\": \"data-headers\",\r\n            \"processor\": function (node, val, self) {\r\n                if (val === void 0 || val == null) return this.value;\r\n                if (typeof val == \"string\") {\r\n                    try {\r\n                        val = JSON.parse(val);\r\n                    } catch (e) {\r\n                        console.error(\"Form JSON.parse error: \", e);\r\n                    }\r\n                }\r\n                return Object.assign(self.value, val);\r\n            }\r\n        }\r\n    };\r\n\r\n    Form.prototype.mixMessagesOptions = function () {\r\n        var global = this.sf.options.instances.form;\r\n        this.options.messages = Object.assign({},\r\n            formMessages.defaults,\r\n            global && global.messages && global.messages[this.options.messagesType],\r\n            this.options.messages\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Call on form submit\r\n     * @param {Event} e submit event\r\n     */\r\n    Form.prototype.onSubmit = function (e) {\r\n        if (this.sf.instancesController.getInstance('lock', this.node)) {//on lock we should'n do any actions\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            return;\r\n        }\r\n\r\n        this.removeMessages();\r\n\r\n        this.options.data = this.getFormData();\r\n\r\n        // We can send files only with FormData\r\n        // If form contain files and no FormData than disable ajax\r\n        if (!window.FormData && this.options.context.querySelectorAll(\"input[type='file']\").length !== 0) {\r\n            this.options.useAjax = false;\r\n        }\r\n        this.events.trigger(\"beforeSend\", this.options);\r\n        //sf.events.performAction(\"beforeSubmit\", this.options);\r\n        //this.events.performAction(\"beforeSubmit\", this.options);\r\n\r\n        if (this.options.useAjax) {\r\n\r\n            this.send(this.options);\r\n\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Locker. Add or remove.\r\n     * @param {Boolean} [remove]\r\n     */\r\n    Form.prototype.lock = function (remove) {\r\n        if (!this.options.lockType || this.options.lockType === 'none') {\r\n            return;\r\n        }\r\n        if (remove) {\r\n            if (!this.sf.instancesController.removeInstance(\"lock\", this.node)) {\r\n                console.warn(\"You try to remove 'lock' instance, but it is not available or not started\");\r\n            }\r\n        } else {\r\n            if (!this.sf.instancesController.addInstance(\"lock\", this.node, {type: this.options.lockType})) {\r\n                console.warn(\"You try to add 'lock' instance, but it is not available or already started\");\r\n            }\r\n        }\r\n    };\r\n\r\n    //Form messages\r\n    Form.prototype.showFormMessage = formMessages.showFormMessage;\r\n    Form.prototype.showFieldMessage = formMessages.showFieldMessage;\r\n    Form.prototype.showFieldsMessages = formMessages.showFieldsMessages;\r\n    Form.prototype.showMessages = formMessages.showMessages;\r\n    Form.prototype.removeMessages = formMessages.removeMessages;\r\n    Form.prototype.removeMessage = formMessages.removeMessage;\r\n\r\n    Form.prototype.processAnswer = function (answer) {\r\n        this.options.messagesType && this.showMessages(answer);\r\n    };\r\n\r\n    /**\r\n     * Send form to server\r\n     * @param sendOptions\r\n     */\r\n    Form.prototype.send = function (sendOptions) {\r\n        var that = this;\r\n        this.lock();\r\n        if (sendOptions.beforeSubmitCallback) {\r\n            var fn = eval(sendOptions.beforeSubmitCallback);\r\n            if (typeof(fn) === \"function\") {\r\n                fn.call(sendOptions);\r\n            }\r\n        }\r\n        this.sf.ajax.send(sendOptions).then(\r\n            function (answer) {\r\n                that.events.trigger(\"success\", sendOptions);\r\n                return answer;\r\n            },\r\n            function (error) {\r\n                that.events.trigger(\"error\", sendOptions);\r\n                return error;\r\n            }).then(function (answer) {\r\n            that.lock(true);\r\n            that.processAnswer(answer);\r\n            that.events.trigger(\"always\", sendOptions);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Serialize form\r\n     */\r\n    Form.prototype.getFormData = function () {\r\n        if (!!window.FormData) {\r\n            return new FormData(this.options.context);\r\n        } else {\r\n            console.log(\"Form `\" + this.options.context + \"` were processed without FormData.\");\r\n            return new formToObject(this.options.context);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Set options (overwrite current)\r\n     * @param {Object} opt options\r\n     */\r\n    Form.prototype.setOptions = function (opt) {\r\n        this.options = this.sf.modules.helpers.tools.extend(this.options, opt);\r\n    };\r\n\r\n    /**\r\n     * Add all events for forms\r\n     */\r\n    Form.prototype.addEvents = function () {\r\n        var that = this;\r\n        this.DOMEvents.add([\r\n            {\r\n                DOMNode: this.options.context,\r\n                eventType: \"submit\",\r\n                eventFunction: function (e) {\r\n                    that.onSubmit.call(that, e)\r\n                }\r\n            }\r\n        ]);\r\n    };\r\n\r\n    /**\r\n     * Clear all variables and die\r\n     */\r\n    Form.prototype.die = function () {\r\n        this.DOMEvents.removeAll();\r\n        //todo don't we need to remove it's addons and plugins?\r\n    };\r\n\r\n    /**\r\n     * Register form\r\n     */\r\n    sf.instancesController.registerInstanceType(Form, \"js-sf-form\");\r\n\r\n})(sf);\n},{\"./formMessages\":15}],15:[function(require,module,exports){\n\"use strict\";\r\nvar iterateInputs = require(\"../../helpers/tools/iterateInputs\");\r\nvar domTools = require(\"../../helpers/domTools\");\r\n\r\nvar defaults = {\r\n    template: '<div class=\"alert form-msg ${type}\"><button class=\"btn-close\">×</button><p class=\"msg\">${text}</p></div>',\r\n    close: '.btn-close',\r\n    place: 'bottom',\r\n    levels: {\r\n        success: \"success\", info: \"info\", warning: \"warning\", error: \"error\"\r\n    },\r\n    field: '.item-form',\r\n    fieldTemplate: '<div class=\"alert form-msg ${type}\"><p class=\"msg\">${text}</p></div>',\r\n    fieldClose: '.btn-close',\r\n    fieldPlace: 'bottom',\r\n    fieldPrefix: ''//for bootstrap: class=\"has-danger\"\r\n};\r\n\r\n//often used alias\r\ndefaults.levels.message = defaults.levels.success;\r\n\r\n//other aliases\r\n//PSR-3 severity levels mapping (debug, info, notice, warning, error, critical, alert, emergency)\r\n//https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md\r\ndefaults.levels.debug = defaults.levels.success;\r\ndefaults.levels.info = defaults.levels.notice = defaults.levels.info;\r\ndefaults.levels.danger = defaults.levels.critical = defaults.levels.alert = defaults.levels.emergency = defaults.levels.error;\r\n\r\nfunction prepareMessageObject(message, type) {\r\n    if (Object.prototype.toString.call(message) !== \"[object Object]\") {\r\n        message = {text: message, type: type};\r\n    }\r\n    message.text = message.text || message.message || message;\r\n    message.type = message.type || type;\r\n    return message;\r\n}\r\n\r\nmodule.exports = {\r\n    defaults: defaults,\r\n    showMessages: function (answer) {\r\n        if (!answer) return;\r\n        var isMsg = false, that = this;\r\n\r\n        for (var type in this.options.messages.levels) {\r\n            if (answer[type]) {\r\n                this.showFormMessage(answer[type], this.options.messages.levels[type]);\r\n                isMsg = true;\r\n            }\r\n        }\r\n\r\n        if (answer.messages) {\r\n            this.showFieldsMessages(answer.messages, \"success\");\r\n            isMsg = true;\r\n        }\r\n        if (answer.errors) {\r\n            this.showFieldsMessages(answer.errors, \"error\");\r\n            isMsg = true;\r\n        }\r\n        if (answer.warnings) {\r\n            this.showFieldsMessages(answer.warnings, \"warning\");\r\n            isMsg = true;\r\n        }\r\n\r\n        if (!isMsg) {\r\n            var error = answer.status ? answer.status + \" \" : \"\";\r\n            error += answer.statusText ? answer.statusText : \"\";\r\n            error += answer.data && !answer.statusText ? answer.data : \"\";\r\n            error += error.length === 0 ? answer : \"\";\r\n            this.showFormMessage(error, \"error\");\r\n        }\r\n\r\n        this._messages.forEach(function (m) {\r\n            if (m.close) {\r\n                m.closeHandler = that.removeMessage.bind(that, m);\r\n                m.close.addEventListener(\"click\", m.closeHandler);\r\n            }\r\n        });\r\n    },\r\n    removeMessage: function (m, e) {\r\n        m.close && m.close.removeEventListener(\"click\", m.closeHandler);\r\n        m.el.parentNode.removeChild(m.el);\r\n        m.field && m.field.classList.remove(this.options.messages.fieldPrefix + m.type);\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            this._messages.splice(this._messages.indexOf(m), 1);\r\n        }\r\n    },\r\n    removeMessages: function () {\r\n        var that = this;\r\n        if (this._messages) {\r\n            this._messages.forEach(function (m) {\r\n                that.removeMessage(m, false);\r\n            });\r\n        }\r\n        that._messages = [];\r\n    },\r\n    showFormMessage: function (message, type) {\r\n        message = prepareMessageObject(message, type);\r\n\r\n        var msgEl, parent, tpl = this.options.messages.template, parser = new DOMParser();\r\n\r\n        for (var item in message) {\r\n            if (!message.hasOwnProperty(item)) return;\r\n            tpl = tpl.replace('${' + item + '}', message[item]);\r\n        }\r\n\r\n        msgEl = parser.parseFromString(tpl, \"text/html\").firstChild.lastChild.firstChild;\r\n\r\n        if (this.options.messages.place === \"bottom\") {\r\n            this.node.appendChild(msgEl);\r\n        } else if (this.options.messages.place === \"top\") {\r\n            this.node.insertBefore(msgEl, this.node.firstChild);\r\n        } else {\r\n            parent = document.querySelector(this.options.messages.place);\r\n            parent.appendChild(msgEl)\r\n        }\r\n        this._messages.push({el: msgEl, close: msgEl.querySelector(this.options.messages.close)});\r\n    },\r\n    showFieldMessage: function (el, message, type) {\r\n        var field = domTools.closest(el, this.options.messages.field), msgEl, tpl = this.options.messages.fieldTemplate;\r\n        if (!field) return;\r\n        var parser = new DOMParser();\r\n        message = prepareMessageObject(message, type);\r\n\r\n        field.classList.add(this.options.messages.fieldPrefix + type);\r\n\r\n        for (var item in message) {\r\n            if (!message.hasOwnProperty(item)) return;\r\n            tpl = tpl.replace('${' + item + '}', message[item]);\r\n        }\r\n\r\n        msgEl = parser.parseFromString(tpl, \"text/html\").firstChild.lastChild.firstChild;\r\n\r\n        if (this.options.messages.fieldPlace === \"bottom\") {\r\n            field.appendChild(msgEl);\r\n        } else if (this.options.messages.fieldPlace === \"top\") {\r\n            field.insertBefore(msgEl, field.firstChild);\r\n        } else {\r\n            field = field.querySelector(this.options.messages.fieldPlace);\r\n            field.appendChild(msgEl)\r\n        }\r\n\r\n        this._messages.push({\r\n            el: msgEl,\r\n            close: msgEl.querySelector(this.options.messages.fieldClose),\r\n            field: field,\r\n            type: type\r\n        });\r\n    },\r\n    showFieldsMessages: function (messages, type) {\r\n        var that = this,\r\n            notFound = iterateInputs(this.node, messages, function (el, message) {\r\n                that.showFieldMessage(el, message, type)\r\n            });\r\n        //todo data-name for notFound\r\n    }\r\n};\n},{\"../../helpers/domTools\":10,\"../../helpers/tools/iterateInputs\":12}],16:[function(require,module,exports){\n\"use strict\";\r\n\r\n(function(sf) {\r\n    /**\r\n     * Spiral lock for forms\r\n     * @constructor Lock\r\n     */\r\n\r\n    var Lock = function(sf, node, options){\r\n        this._construct(sf, node, options);\r\n    };\r\n\r\n    /**\r\n     * @lends Lock.prototype\r\n     */\r\n    Lock.prototype = Object.create(sf.modules.core.BaseDOMConstructor.prototype);\r\n\r\n    /**\r\n     * Name of module\r\n     * @type {string}\r\n     */\r\n    Lock.prototype.name = \"lock\";\r\n\r\n    /**\r\n     * Function that call on new instance is created.\r\n     * @param {Object} sf\r\n     * @param {Object} node  DomNode of form\r\n     * @param {Object} [options] all options to override default\r\n     * @private\r\n     */\r\n    Lock.prototype._construct = function(sf, node, options){\r\n        this.init(sf, node, options);//call parent\r\n        this.add(this.options.type,this.node);\r\n    };\r\n    /**\r\n     * Add lock\r\n     * @param {String} [type] type of lock @see sf.lock.types\r\n     * @param {Object} context context to add lock\r\n     * @returns {Function|*}\r\n     */\r\n    Lock.prototype.add =function(type, context){\r\n        if (!this.types.hasOwnProperty(type)){\r\n            return false;\r\n        }\r\n        var node = document.createElement(\"div\");\r\n        node.className = this.types[type].className || 'js-sf-lock';\r\n        node.innerHTML = this.types[type].html;\r\n        context.appendChild(node);\r\n        context.classList.add(\"locked\");\r\n        return this.types[type].progress;\r\n    };\r\n    /**\r\n     * Clear all variables and die\r\n     */\r\n    Lock.prototype.die = function () {\r\n        this.remove();\r\n    };\r\n    /**\r\n     * Remove lock\r\n     */\r\n    Lock.prototype.remove = function(){\r\n        this.node.classList.remove(\"locked\");\r\n        var sfLock = this.node.querySelector(\".js-sf-lock\");//todo this.lockNode ?\r\n        if (sfLock) {\r\n            this.node.removeChild(sfLock);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Object with lock types.\r\n     * @enum {Object}\r\n     */\r\n    Lock.prototype.types  = {\r\n        /**\r\n         * @type {Object}\r\n         */\r\n        spinner: {\r\n            /**\r\n             * HTML\r\n             * @inner\r\n             * @type String\r\n             */\r\n            html: '<div class=\"sf-spinner\"></div>'\r\n        },\r\n        progress: {\r\n            /**\r\n             * HTML\r\n             * @inner\r\n             * @type String\r\n             */\r\n            html: '<div class=\"sf-progress\"><div class=\"progress-line\"></div></div>',\r\n            /**\r\n             * Function to change styles while AJAX progress\r\n             * @param current\r\n             * @param total\r\n             */\r\n            progress: function (current, total) {\r\n                var progress = this.context.getElementsByClassName(\"progress-line\")[0];\r\n                progress.style.width = 100 * (current / total) + \"%\";\r\n            }\r\n        }\r\n    };\r\n\r\n    //we have to have some default locker, let it be spinner\r\n    Lock.prototype.types.default = Lock.prototype.types.spinner;\r\n\r\n    /**\r\n     * Register lock\r\n     */\r\n    sf.instancesController.registerInstanceType(Lock);\r\n\r\n})(sf);\r\n\n},{}],17:[function(require,module,exports){\nvar core = {\r\n    Ajax: require(\"./core/Ajax\"),\r\n    BaseDOMConstructor: require(\"./core/BaseDOMConstructor\"),\r\n    DomMutations: require(\"./core/DomMutations\"),\r\n    Events: require(\"./core/Events\"),\r\n    InstancesController: require(\"./core/InstancesController\")\r\n};\r\n\r\nvar helpers = {\r\n    DOMEvents: require(\"./helpers/DOMEvents\"),\r\n    domTools: require(\"./helpers/domTools\"),\r\n    LikeFormData: require(\"./helpers/LikeFormData\"),\r\n    tools: require(\"./helpers/tools\")\r\n};\r\n\r\nvar sf = {\r\n    core: core,\r\n    helpers: helpers,\r\n    tools: helpers.tools,\r\n    modules: {//todo remove this when removed in dependencies\r\n        'WILL_BE_DEPRECATED': true,\r\n        core: core,\r\n        helpers: helpers\r\n    }\r\n};\r\n\r\nmodule.exports = sf;\n},{\"./core/Ajax\":1,\"./core/BaseDOMConstructor\":2,\"./core/DomMutations\":3,\"./core/Events\":4,\"./core/InstancesController\":5,\"./helpers/DOMEvents\":8,\"./helpers/LikeFormData\":9,\"./helpers/domTools\":10,\"./helpers/tools\":11}],18:[function(require,module,exports){\n/**\r\n * Object.assign polyfill\r\n * https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n */\r\nif (typeof Object.assign != 'function') {\r\n    (function () {\r\n        Object.assign = function (target) {\r\n            'use strict';\r\n            if (target === undefined || target === null) {\r\n                throw new TypeError('Cannot convert undefined or null to object');\r\n            }\r\n\r\n            var output = Object(target);\r\n            for (var index = 1; index < arguments.length; index++) {\r\n                var source = arguments[index];\r\n                if (source !== undefined && source !== null) {\r\n                    for (var nextKey in source) {\r\n                        if (source.hasOwnProperty(nextKey)) {\r\n                            output[nextKey] = source[nextKey];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return output;\r\n        };\r\n    })();\r\n}\n},{}],19:[function(require,module,exports){\n/**\r\n * Avoid `console` errors in browsers that lack a console.\r\n */\r\n(function () {\r\n    var method, noop = function () {\r\n        },\r\n        methods = [\r\n            'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',\r\n            'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',\r\n            'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',\r\n            'timeStamp', 'trace', 'warn'\r\n        ],\r\n        length = methods.length,\r\n        console = (window.console = window.console || {});\r\n\r\n    while (length--) {\r\n        method = methods[length];\r\n\r\n        // Only stub undefined methods.\r\n        if (!console[method]) {\r\n            console[method] = noop;\r\n        }\r\n    }\r\n}());\r\n\n},{}],20:[function(require,module,exports){\n/*! github.com/serbanghita/formToObject.js 1.0.1  (c) 2013 Serban Ghita <serbanghita@gmail.com> @licence MIT */\r\n\r\n(function(){\r\n\r\n    // Constructor.\r\n\tvar formToObject = function( formRef ){\r\n\r\n\t\tif( !formRef ){ return false; }\r\n\r\n\t\tthis.formRef       = formRef;\r\n\t\tthis.keyRegex      = /[^\\[\\]]+/g;\r\n\t\tthis.$form         = null;\r\n\t\tthis.$formElements = [];\r\n\t\tthis.formObj       = {};\r\n\r\n\t\tif( !this.setForm() ){ return false; }\r\n\t\tif( !this.setFormElements() ){ return false; }\r\n\r\n\t\treturn this.setFormObj();\r\n\r\n\t};\r\n\r\n\t// Set the main form object we are working on.\r\n\tformToObject.prototype.setForm = function(){\r\n\r\n\t\tswitch( typeof this.formRef ){\r\n\r\n\t\t\tcase 'string':\r\n\t\t\t\tthis.$form = document.getElementById( this.formRef );\r\n\t\t\tbreak;\r\n\r\n\t\t\tcase 'object':\r\n\t\t\t\tif( this.isDomNode(this.formRef) ){\r\n\t\t\t\t\tthis.$form = this.formRef;\r\n\t\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.$form;\r\n\r\n\t};\r\n\r\n\t// Set the elements we need to parse.\r\n\tformToObject.prototype.setFormElements = function(){\r\n\t\tthis.$formElements = this.$form.querySelectorAll('input, textarea, select');\r\n\t\treturn this.$formElements.length;\r\n\t};\r\n\r\n\t// Check to see if the object is a HTML node.\r\n\tformToObject.prototype.isDomNode = function( node ){\r\n\t\treturn typeof node === \"object\" && \"nodeType\" in node && node.nodeType === 1;\r\n\t};\r\n\r\n\t// Iteration through arrays and objects. Compatible with IE.\r\n\tformToObject.prototype.forEach = function( arr, callback ){\r\n\r\n\t\tif([].forEach){\r\n\t\t\treturn [].forEach.call(arr, callback);\r\n\t\t}\r\n\r\n\t\tvar i;\r\n\t\tfor(i in arr){\r\n\t\t\t// Object.prototype.hasOwnProperty instead of arr.hasOwnProperty for IE8 compatibility.\r\n\t\t\tif( Object.prototype.hasOwnProperty.call(arr,i) ){\r\n\t\t\t\tcallback.call(arr, arr[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n    // Recursive method that adds keys and values of the corresponding fields.\r\n\tformToObject.prototype.addChild = function( result, domNode, keys, value ){\r\n\r\n\t\t// #1 - Single dimensional array.\r\n\t\tif(keys.length === 1){\r\n\r\n\t\t\t// We're only interested in the radio that is checked.\r\n\t\t\tif( domNode.nodeName === 'INPUT' && domNode.type === 'radio' ) {\r\n\t\t\t\tif( domNode.checked ){\r\n\t\t\t\t\treturn result[keys] = value;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Checkboxes are a special case. We have to grab each checked values\r\n\t\t\t// and put them into an array.\r\n\t\t\tif( domNode.nodeName === 'INPUT' && domNode.type === 'checkbox' ) {\r\n\r\n\t\t\t\tif( domNode.checked ){\r\n\r\n\t\t\t\t\tif( !result[keys] ){\r\n\t\t\t\t\t\tresult[keys] = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn result[keys].push( value );\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Multiple select is a special case.\r\n\t\t\t// We have to grab each selected option and put them into an array.\r\n\t\t\tif( domNode.nodeName === 'SELECT' && domNode.type === 'select-multiple' ) {\r\n\r\n\t\t\t\tresult[keys] = [];\r\n\t\t\t\tvar DOMchilds = domNode.querySelectorAll('option[selected]');\r\n\t\t\t\tif( DOMchilds ){\r\n\t\t\t\t\tthis.forEach(DOMchilds, function(child){\r\n\t\t\t\t\t\tresult[keys].push( child.value );\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Fallback. The default one to one assign.\r\n\t\t\tresult[keys] = value;\r\n\r\n\t\t}\r\n\r\n\t\t// #2 - Multi dimensional array.\r\n\t\tif(keys.length > 1) {\r\n\r\n\t\t\tif(!result[keys[0]]){\r\n\t\t\t\tresult[keys[0]] = {};\r\n\t\t\t}\r\n\r\n\t\t\treturn this.addChild(result[keys[0]], domNode, keys.splice(1, keys.length), value);\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t};\r\n\r\n\tformToObject.prototype.setFormObj = function(){\r\n\r\n\t\tvar test, i = 0;\r\n\r\n\t\tfor(i = 0; i < this.$formElements.length; i++){\r\n\t\t\t// Ignore the element if the 'name' attribute is empty.\r\n\t\t\t// Ignore the 'disabled' elements.\r\n\t\t\tif( this.$formElements[i].name && !this.$formElements[i].disabled ) {\r\n\t\t\t\ttest = this.$formElements[i].name.match( this.keyRegex );\r\n\t\t\t\tthis.addChild( this.formObj, this.$formElements[i], test, this.$formElements[i].value );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.formObj;\r\n\r\n\t}\r\n\r\n\t// AMD/requirejs: Define the module\r\n\tif( typeof define === 'function' && define.amd ) {\r\n\t\tdefine(function () {\r\n\t\t\treturn formToObject;\r\n\t\t});\r\n\t}\r\n\t// Browser: Expose to window\r\n\telse {\r\n\t\twindow.formToObject = formToObject;\r\n\t}\r\n\r\n})();\r\n\n},{}]},{},[13])\n\n","\"use strict\";\r\n\r\n/**\r\n * This a base constructor (class) for any DOM based instance.\r\n * This constructor just grab all node attributes and generates options. All processed options stored at this.options\r\n * @example\r\n * We have html like this:\r\n * <div data-test=\"testValue\" data-value=\"value123\">.....</div>\r\n * this.options will be:\r\n * {\r\n *  test:\"testValue\",\r\n *  value:\"value\"\r\n * }\r\n * Note: data-test and data-value should be described in attributesToGrab\r\n * @constructor\r\n */\r\nvar BaseDOMConstructor = function () {\r\n};\r\n/**\r\n * Init method. Call after construct instance\r\n * @param {Object} sf\r\n * @param {Object} node  DomNode of form\r\n * @param {Object} [options] all options to override default\r\n */\r\nBaseDOMConstructor.prototype.init = function (sf, node, options) {\r\n    //TODO data-spiral-JSON\r\n    this.sf = sf;\r\n    this.node = node;\r\n    //if (sf.options && sf.options.instances && sf.options.instances[this.name]) {\r\n    //    options = Object.assign(options || {}, sf.options.instances[this.name]);\r\n    //}\r\n    this.options = Object.assign(this.grabOptions(node), options);\r\n};\r\n\r\n/**\r\n * This is a options to generate.\r\n * You should provide processor or value.\r\n * @type {Object}\r\n * @property {Object} propertyKey - object of property\r\n * @property {String} propertyKey.value - default value to return\r\n * @property {String} [propertyKey.domAttr] - dom attribute to grab data\r\n * @property {Function} [propertyKey.processor] -  processor to process data before return\r\n * @property {Object}  ... - Another object of one property\r\n * @type {{}}\r\n *  @example\r\n * \"someAttribute\": {// key\r\n *      value: true, //default Value\r\n *      domAttr: \"data-some-attribute\", // attribute from node to grab\r\n *      processor: function (node,val,self) { //processor to process values before return\r\n *          //some calculations\r\n *      return someValue;\r\n *      }\r\n *  },\r\n *  \"anotherAttribute\":{...},\r\n *  \"...\"\r\n *\r\n *  @example\r\n *  //return node as value\r\n *  \"context\": {\r\n *      \"processor\": function (node,val,key) { //processor\r\n *          return node;\r\n *      }\r\n *  },\r\n *  \"Another-key\":{...},\r\n *  \"...\"\r\n * @example\r\n * //Grab attribute \"data-attribute\" as \"MyAttribute\" if attribute not provided return \"DefaultValue\"\r\n * // Dom node <div data-attribute=\"someValue\"></div>\r\n * \"MyAttribute\": {\r\n *      value: \"DefaultValue\",\r\n *      domAttr: \"data-attribute\"\r\n *  }\r\n *  //after processing we should have\r\n *  {\"MyAttribute\":\"someValue\"}\r\n *\r\n *  @example\r\n * //Grab attribute \"data-attribute\" as \"MyAttribute\" and return some value instead\r\n * //Dom node  <div data-attribute=\"someValue\"></div>\r\n * \"MyAttribute\": {\r\n *      domAttr: \"data-attribute\",\r\n *      processor: function (node,val,self) {\r\n *          return val+\"SomeCalculation\";\r\n *      }\r\n *  }\r\n *  //after processing we should have\r\n *  {\"MyAttribute\":\"someValueSomeCalculation\"}\r\n *\r\n * @example\r\n * //return function as value\r\n * processAnswer: {\r\n *      \"value\": function (options) {\r\n *         return \"someVal\";\r\n *      }\r\n *  //after processing we should have\r\n *  {\"processAnswer\":function (options) {\r\n *         return \"someVal\";\r\n *      }\r\n *   }\r\n *\r\n * @example\r\n * //return init time as value\r\n * initTime: {\r\n *      \"processor\": function (node,val,self) {\r\n *         return new Date().getTime;\r\n *      }\r\n *  //after processing we should have\r\n *  {\"initTime\":1429808977404}\r\n * @example\r\n * //return other value instead of real one\r\n * processAnswer: {\r\n *      \"processor\": function (node,val,self) {\r\n *         return \"someVal\";\r\n *      }\r\n *  //after processing we should have\r\n *  {\"processAnswer\":\"someVal\"}\r\n */\r\nBaseDOMConstructor.prototype.optionsToGrab = {};\r\n\r\n/**\r\n * Grab all options that described in optionsToGrab\r\n * @param {Object} node domNode\r\n * @return {Object}\r\n */\r\nBaseDOMConstructor.prototype.grabOptions = function (node) {\r\n    var options = {};\r\n    var currentOptionValue;\r\n    var currentOption;\r\n    for (var option in this.optionsToGrab) {\r\n        currentOptionValue = null;\r\n        if (this.optionsToGrab.hasOwnProperty(option)) {//if this is own option\r\n            currentOption = this.optionsToGrab[option];\r\n            if (currentOption.hasOwnProperty(\"value\")) {//we have default option. Let's grab it for first\r\n                currentOptionValue = currentOption.value;\r\n            }\r\n\r\n            if (this.sf.options.instances[this.name] && this.sf.options.instances[this.name].hasOwnProperty(option)) {\r\n                currentOptionValue = this.sf.options.instances[this.name][option]\r\n            }\r\n\r\n            if (currentOption.hasOwnProperty(\"domAttr\") && node.attributes.hasOwnProperty(currentOption.domAttr)) {//we can grab the attribute of node\r\n                currentOptionValue = node.attributes[currentOption.domAttr].value;\r\n            }\r\n\r\n            if (currentOption.hasOwnProperty(\"processor\")) {//we have processor. Let's execute it\r\n                currentOptionValue = currentOption.processor.call(this, node, currentOptionValue, currentOption);\r\n            }\r\n\r\n            if (currentOptionValue !== null) {\r\n                options[option] = currentOptionValue;\r\n            }\r\n\r\n        }\r\n    }\r\n    return options;\r\n};\r\n\r\n/**\r\n * Get addon for instance\r\n * @param {String} addonType type of addon (message,fill,etc)\r\n * @param {String} addonName name of addon\r\n */\r\nBaseDOMConstructor.prototype.getAddon = function (addonType, addonName) {\r\n    return this.spiral.instancesController.getInstanceAddon(this.name, addonType, addonName);\r\n};\r\n\r\nmodule.exports = BaseDOMConstructor;\r\n","\"use strict\";\r\n/**\r\n * Dom mutation. Listening to the DOM and add or remove instances based on classes.\r\n * @param {Object} instancesController  spiral instancesController.\r\n * @param {Function} instancesController.getClasses  get all registered modules classes.\r\n * @param {Function} instancesController.addInstance  add instance method.\r\n * @param {Function} instancesController.removeInstance  remove instance method\r\n * @constructor\r\n */\r\nvar DomMutations = function (instancesController) {\r\n    if (!instancesController){\r\n        console.error(\"You should provide instancesController  for DOM Mutation. Because DOM Mutation  should known all classes and\");\r\n        return;\r\n    }\r\n    if (!this.constructor){\r\n        console.error(\"Please call DomMutations with new  - 'new DomMutations()' \");\r\n        return;\r\n    }\r\n    this.instancesController = instancesController;\r\n    var config = {//config for MutationObserver\r\n            attributes: true,\r\n            childList: true,\r\n            characterData: true,\r\n            characterDataOldValue: true,\r\n            subtree: true,\r\n            attributeOldValue: true,\r\n            attributeFilter: [\"class\"]\r\n        },\r\n        that = this;\r\n    this.observer = new MutationObserver(function () {//call function when dom mutated.\r\n        that.onDomMutate.apply(that, arguments)\r\n    });\r\n    this.observer.observe(document, config);//start observer\r\n\r\n};\r\n/**\r\n * When dom mutated this function id executed.\r\n * @param {Array} mutations array of mutations\r\n * @returns {boolean}\r\n */\r\nDomMutations.prototype.onDomMutate = function (mutations) {\r\n    var classArray = this.instancesController.getClasses();//get all registered classes\r\n    var classSelector = \".\" + classArray.join(\",.\");//convert for querySelectorAll()\r\n    if (classSelector.length === 1) {//if not registered any instanceTypes\r\n        return false;\r\n    }\r\n    mutations.forEach(function (mutation) {//loop over mutation array\r\n        switch (mutation.type) {\r\n            case \"attributes\":\r\n                this.processMutationAttributes(mutation, classArray);\r\n                break;\r\n\r\n            case \"characterData\":\r\n\r\n                break;\r\n\r\n            case \"childList\":\r\n                this.processMutationChildList(mutation.addedNodes, \"addInstance\", classSelector, classArray);\r\n                this.processMutationChildList(mutation.removedNodes, \"removeInstance\", classSelector, classArray);\r\n                break;\r\n\r\n            case \"default\":\r\n                console.error(\"Something wrong. Contact tech support\");\r\n        }\r\n    }, this);\r\n    return true;\r\n};\r\n\r\n\r\n\r\nDomMutations.prototype.processMutationAttributes = function (mutation, classArray) {\r\n    var that = this;\r\n    var currentClasses = mutation.target.className.split(\" \"),\r\n        oldClasses = (mutation.oldValue)?mutation.oldValue.split(\" \"):[],\r\n        addedClasses = currentClasses.filter(function (val) {\r\n            return (oldClasses.indexOf(val) === -1);\r\n        }),\r\n        removedClasses = oldClasses.filter(function (val) {\r\n            return (currentClasses.indexOf(val) === -1);\r\n        }),\r\n        addedRegisteredClasses = addedClasses.filter(function (val) {\r\n            return (classArray.indexOf(val) !== -1);\r\n        }),\r\n        removedRegisteredClasses = removedClasses.filter(function (val) {\r\n            return (classArray.indexOf(val) !== -1);\r\n        });\r\n    removedRegisteredClasses.forEach(function (val) {\r\n        that.instancesController.removeInstance(that.instancesController.getInstanceNameByCssClass(val), mutation.target);\r\n    });\r\n    addedRegisteredClasses.forEach(function (val) {\r\n        that.instancesController.addInstance(that.instancesController.getInstanceNameByCssClass(val), mutation.target);\r\n    });\r\n\r\n};\r\n/**\r\n * Process mutation on ChildList\r\n * @param {NodeList} nodesList array with nodes\r\n * @param {String} action action to call (add or remove nodes)\r\n * @param {String} classSelector - string selector for querySelectorAll\r\n * @param {Array} classArray - array of all registered classes\r\n */\r\nDomMutations.prototype.processMutationChildList = function (nodesList, action, classSelector, classArray) {\r\n    var that =this;\r\n    /**\r\n     * Internal function for checking node class\r\n     * @param {Object} node dom node\r\n     */\r\n    function checkNode(node) {\r\n        classArray.forEach(function (className) {//loop over registered classes\r\n            if (node.classList.contains(className)) {//if class match try to add or remove instance for this node\r\n                that.instancesController[action](that.instancesController.getInstanceNameByCssClass(className), node);\r\n            }\r\n        });\r\n    }\r\n\r\n    [].forEach.call(nodesList, function (val) {//loop over mutation nodes\r\n        if (val.nodeType !== 1 || val.nodeName === \"SCRIPT\" || val.nodeName === \"LINK\") {//do not process other nodes then ELEMENT_NODE https://developer.mozilla.org/en-US/docs/Web/API/Node.nodeType also ignore SCRIPT and LINK tag\r\n            return false;\r\n        }\r\n        checkNode(val);//check mutation node\r\n        [].forEach.call(val.querySelectorAll(classSelector), checkNode);//query all nodes with required classes and check it\r\n        return true;\r\n    });\r\n\r\n};\r\n\r\n/**\r\n * Stop listening the dom changes\r\n */\r\nDomMutations.prototype.stopObserve = function () {\r\n    this.observer.disconnect();\r\n};\r\n\r\nmodule.exports = DomMutations;\r\n\r\n\r\n","\"use strict\";\r\n\r\n/**\r\n * Events system.\r\n * @param {Array} allowedEvents array of allowed events.\r\n * @constructs Events\r\n * @example\r\n * //allow to work with all events\r\n * var events = new Events();\r\n * events.on(\"myBestEvent\",function(e){console.log(e)});\r\n * @example\r\n * //Allow to serve only limited events\r\n *  var events = new Events([\"beforeSubmit\",\"onDataReady\"]);\r\n *  events.on(\"myBestEvent\",function(e){console.log(e)});//will not works\r\n *  events.on(\"beforeSubmit\",function(e){console.log(e)});//will work\r\n */\r\nvar Events = function (allowedEvents) {\r\n    this._storage = {};\r\n    this._allowedEvents = allowedEvents;\r\n};\r\n\r\n/**\r\n * Add event(s)\r\n * @param {String} events event or space separated event list\r\n * @param {Function} callback callback function\r\n * @example\r\n * var events = new Events();\r\n * events.on(\"myBestEvent myBestEvent2 myBestEvent3\",function(e){console.log(e)});\r\n * events.on(\"myBestEvent\",function(e){console.log(e)});\r\n */\r\nEvents.prototype.on = function (events, callback) {\r\n    var eventArr = events.replace(/\\s{2,}/g, \" \").split(\" \");\r\n    eventArr.forEach(function(event){\r\n        if (this._allowedEvents  && this._allowedEvents.indexOf(event) === -1){// event not inside allowed events\r\n            console.warn(\"Events. Try to register event %s, but event is not allowed\",event);\r\n            return;\r\n        }\r\n        if (!this._storage.hasOwnProperty(events)) {\r\n            this._storage[event] = [];\r\n        }\r\n        this._storage[event].push(callback);\r\n    },this)\r\n\r\n};\r\n/**\r\n * Add action\r\n * @param {String} action\r\n * @param {Function} func\r\n * @deprecated  use \"on\" instead\r\n */\r\nEvents.prototype.registerAction = Events.prototype.on;\r\n\r\n\r\n/**\r\n * remove event\r\n * @param {String} event\r\n * @param {Function} callback\r\n */\r\nEvents.prototype.off = function (event, callback) {\r\n    alert(\"You try to remove action. This part is incomplete\");\r\n    //TODO\r\n};\r\n\r\n/**\r\n * Trigger event.\r\n * @param {String} event event name\r\n * @param {Object} [options] options to pass to the callback\r\n * @example\r\n * var events = new Events();\r\n * events.on(\"myBestEvent\",function(e){console.log(e.bestKey)});\r\n * events.trigger(\"myBestEvent\",{bestKey:42}); //will show in log\r\n */\r\nEvents.prototype.trigger = function (event, options) {\r\n    if (this._allowedEvents  && this._allowedEvents.indexOf(event) === -1){// event not inside allowed events\r\n        console.warn(\"Events. Try to trigger event %s, but event is not allowed\",event);\r\n        return;\r\n    }\r\n    if (this._storage.hasOwnProperty(event)) {\r\n        for (var n = 0, l = this._storage[event].length; n < l; n++) {\r\n            this._storage[event][n](options);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Perform action\r\n * @param {String} action\r\n * @param {Object} [actionParams] object with all action data from server\r\n * @param {Object} [options] ajax options\r\n * @deprecated use \"trigger\" instead\r\n */\r\nEvents.prototype.performAction = Events.prototype.trigger;\r\n\r\nmodule.exports = Events;","\"use strict\";\r\n\r\n/**\r\n * Instance controller\r\n * @param spiral\r\n * @constructor\r\n */\r\nvar InstancesController = function (spiral) {\r\n    this.spiral = spiral;\r\n    if (!this.constructor){\r\n        console.error(\"Please call InstancesController with new  - 'new InstancesController()' \");\r\n        return;\r\n    }\r\n    this._storage = {\r\n        instancesConstructors: {\r\n            cssClasses:{},\r\n            jsConstructors:{}\r\n        },\r\n        addons: {},\r\n        instances: {}\r\n    };\r\n\r\n    //todo decide if we need this\r\n    //[\"onAddInstance\", \"onRemoveInstance\"]\r\n    //this.events = new spiral.modules.core.Events();\r\n};\r\n/**\r\n * Register new instance type\r\n * @param {Function} constructorFunction - constructor function of instance\r\n * @param {String} [cssClassName] - css class name of instance. If class not provided that it can't be automatically controlled by DomMutation. But you still can use it from JS.\r\n * @param {Boolean} [isSkipInitialization=false]  - skip component initialization, just adding, no init nodes.\r\n */\r\nInstancesController.prototype.registerInstanceType = function (constructorFunction, cssClassName, isSkipInitialization) {\r\n    var instanceName = constructorFunction.prototype.name;\r\n\r\n    if (!instanceName){\r\n        console.error(\"Instance constructor should have name inside it\");\r\n    }\r\n\r\n    if (this._storage.instancesConstructors.jsConstructors.hasOwnProperty(instanceName)){\r\n        console.error(\"Instance Constructor for type '%s' already added. Skipping\",instanceName);\r\n        return;\r\n    }\r\n\r\n    if (cssClassName){//add link (cssClassName->instanceName)\r\n        this._storage.instancesConstructors.cssClasses[cssClassName] = instanceName;\r\n    }\r\n\r\n    this._storage.instancesConstructors.jsConstructors[instanceName] = constructorFunction;\r\n\r\n\r\n\r\n    // if (this._storage.instancesConstructors.hasOwnProperty(className)){\r\n    //    console.error(\"Instance Constructor for type %s already added. Skipping\",constructorFunction.prototype.name);\r\n    //    return;\r\n    //}\r\n    //this._storage.instancesConstructors[className] = {//init storage fields\r\n    //    \"typeName\": constructorFunction.prototype.name,\r\n    //    \"constructor\": constructorFunction\r\n    //};\r\n    this._storage.instances[instanceName] = [];\r\n    if (!isSkipInitialization){\r\n        var nodes = document.getElementsByClassName(cssClassName);//init add nodes with this class\r\n        for (var i = 0, max = nodes.length; i < max; i++) {\r\n            this.addInstance(instanceName, nodes[i]);\r\n        }\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Old method to register instance type\r\n * @param className\r\n * @param constructorFunction\r\n * @param isSkipInitialization\r\n * @deprecated\r\n */\r\nInstancesController.prototype.addInstanceType =function(className,constructorFunction, isSkipInitialization){\r\n    console.warn(\"addInstanceType is deprecated. Please use registerInstanceType instead\");\r\n    return this.registerInstanceType(constructorFunction, isSkipInitialization);\r\n};\r\n\r\n\r\n/**\r\n * Add instance\r\n * @param {String} instanceName - name of instance\r\n * @param {Object} node - dom node\r\n * @param {Object} [options] all options for send to the constructor\r\n * @returns {boolean}\r\n */\r\nInstancesController.prototype.addInstance = function (instanceName, node, options) {\r\n    var instanceConstructor = this._storage.instancesConstructors.jsConstructors[instanceName],\r\n        isAlreadyAdded = this.getInstance(instanceName,node);\r\n    if (!instanceConstructor || isAlreadyAdded) {//if not found this type  or already added - return\r\n        return false;\r\n    }\r\n//    console.log(\"Adding instance for type -\",instanceName,\". Node - \",node);\r\n    var instance = new instanceConstructor(this.spiral,node, options);\r\n    this._storage.instances[instanceName].push({//add new instance of this type\r\n        \"node\": node,\r\n        \"instance\": instance\r\n    });\r\n\r\n    //this.events.trigger(\"onAddInstance\", instance);\r\n\r\n    return instance;\r\n};\r\n/**\r\n * Remove instance.\r\n * @param {String} instanceName - name of instance class\r\n * @param {Object|String} node - dom node ID\r\n * @returns {boolean}\r\n */\r\nInstancesController.prototype.removeInstance = function (instanceName, node) {\r\n    var instanceObj = this.getInstance(instanceName, node,true),\r\n        key;\r\n    if (!instanceObj) {\r\n        return false;\r\n    }\r\n    instanceObj.instance.die();//avoid memory leak\r\n    key = this._storage.instances[instanceName].indexOf(instanceObj);\r\n    if (key !== -1){//remove key\r\n        this._storage.instances[instanceName].splice(key, 1);\r\n    }\r\n    return true;\r\n};\r\n/**\r\n * Get instance. Return instance object of this dom node\r\n * @param {String} instanceName - name of instance\r\n * @param {Object|String} node - dom node o dome node ID\r\n * @param {boolean} [isReturnObject] - return object or instance\r\n * @returns {boolean}\r\n */\r\nInstancesController.prototype.getInstance = function (instanceName, node, isReturnObject) {//TODO isReturnObject not needed. Refactor and remove\r\n    var typeArr = this._storage.instances[instanceName],\r\n        ret = false;\r\n    if (!typeArr) {\r\n        return false;\r\n    }\r\n    node = (node instanceof HTMLElement) ? node : document.getElementById(node);\r\n    if (!node) {\r\n        return false;\r\n    }\r\n    for (var key = 0, l = typeArr.length; key < l; key++) {//iterate storage and try to find instance\r\n        if (typeArr[key].node === node) {\r\n            ret = (isReturnObject) ? typeArr[key] : typeArr[key].instance;\r\n            break;\r\n        }\r\n    }\r\n    return ret;\r\n};\r\n\r\n/**\r\n * Register addon for instance\r\n * @param {Function|Object} addon\r\n * @param {String} instanceName name of instance to register addon\r\n * @param {String} addonType type of addon (message,fill,etc)\r\n * @param {String} addonName name of addon (spiral, bootstrap,etc)\r\n */\r\nInstancesController.prototype.registerAddon = function(addon, instanceName, addonType, addonName){\r\n    if (!this._storage.addons.hasOwnProperty(instanceName)){\r\n        this._storage.addons[instanceName] = {};\r\n    }\r\n    if (!this._storage.addons[instanceName].hasOwnProperty(addonType)){\r\n        this._storage.addons[instanceName][addonType] = {};\r\n    }\r\n    if (this._storage.addons[instanceName][addonType].hasOwnProperty(addonName)){\r\n        console.error(\"The %s addon type %s already registered for instance %s! Skipping registration.\",addonName,addonType,instanceName);\r\n        return;\r\n    }\r\n    this._storage.addons[instanceName][addonType][addonName]= addon;\r\n\r\n};\r\n\r\n/**\r\n * Get registered addon\r\n * @param {String} instanceName name of instance to register addon\r\n * @param {String} addonType type of addon (message,fill,etc)\r\n * @param {String} addonName name of addon (spiral, bootstrap,etc)\r\n */\r\nInstancesController.prototype.getInstanceAddon =function(instanceName, addonType, addonName){\r\n    if (!this._storage.addons.hasOwnProperty(instanceName) || !this._storage.addons[instanceName].hasOwnProperty(addonType) || !this._storage.addons[instanceName][addonType].hasOwnProperty(addonName)){\r\n        return false;\r\n    }\r\n    return this._storage.addons[instanceName][addonType][addonName];\r\n};\r\n\r\n\r\n/**\r\n * Get all registered classes\r\n * @returns {Array}\r\n */\r\nInstancesController.prototype.getClasses = function (){\r\n    return Object.keys(this._storage.instancesConstructors.cssClasses);\r\n};\r\n\r\n/**\r\n * For given cssClass return name of instance\r\n * @param {String} cssClass\r\n * @return {*}\r\n */\r\nInstancesController.prototype.getInstanceNameByCssClass = function(cssClass){\r\n    return this._storage.instancesConstructors.cssClasses[cssClass];\r\n};\r\n\r\n/**\r\n * Get constructor by name or class name\r\n */\r\nInstancesController.prototype.getInstanceConstructors = function (name){\r\n\r\n   //TODO\r\n};\r\n\r\nmodule.exports = InstancesController;\r\n","\"use strict\";\r\n\r\n/**\r\n * This plugin adds ability to perform actions from the server.\r\n * \"action\":\"reload\"\r\n * \"action\":{\"redirect\":\"/account\"}\r\n * \"action\":{\"redirect\":\"/account\",\"delay\":3000}\r\n * \"action\":{\"name\":\"redirect\",\"url\":\"/account\",\"delay\":3000}\r\n */\r\nmodule.exports = function (sf) {\r\n    sf.ajax.events.on('load', function (options) {\r\n        var response = options.response;\r\n        if (response.hasOwnProperty('action')) {\r\n            if (typeof response.action === 'string') {//\"action\":\"reload\"\r\n                sf.events.trigger(response.action);\r\n            } else if (typeof response.action === 'object') {\r\n                var keys = Object.keys(response.action);\r\n                if (keys.length === 1) {//\"action\":{\"redirect\":\"/account\"}\r\n                    sf.events.trigger(keys[0], response.action[keys[0]], options);\r\n                } else if (keys.length === 2 && response.action.delay) {//\"action\":{\"redirect\":\"/account\",\"delay\":3000}\r\n                    setTimeout(function () {\r\n                        var action = keys.filter(function (value) {\r\n                            return value !== 'delay';\r\n                        })[0];\r\n                        sf.events.trigger(action, response.action[action], options);\r\n                    }, +response.action.delay);\r\n                } else if (keys.length > 1) {//\"action\":{\"name\":\"redirect\",\"url\":\"/account\",\"delay\":3000}\r\n                    setTimeout(function () {\r\n                        sf.events.trigger(response.action.name, response.action, options);\r\n                    }, +response.action.delay || 0);\r\n                } else {\r\n                    console.error(\"Action from server. Object doesn't have keys. \", response.action);\r\n                }\r\n            } else {\r\n                console.error(\"Action from server. Something wrong. \", response.action);\r\n            }\r\n        }\r\n    });\r\n};","module.exports = function(events){\r\n    events.on(\"redirect\", function (event) {\r\n        var url = Object.prototype.toString.call(event) === \"[object String]\" ? event : event.url;\r\n        //http://stackoverflow.com/questions/10687099/how-to-test-if-a-url-string-is-absolute-or-relative\r\n        window.location[/^(?:[a-z]+:)?\\/\\//i.test(url) ? 'href' : 'pathname'] = url;\r\n    });\r\n\r\n    events.on('reload', function () {\r\n        location.reload();\r\n    });\r\n\r\n    events.on('refresh', function () {\r\n        events.trigger('reload');\r\n    });\r\n\r\n    events.on('close', function () {\r\n        window.close();\r\n    });\r\n};","\"use strict\";\r\n/**\r\n * Helper to manipulate DOM Events. It's a simple wrapper around \"addEventListener\" but it's store all functions and allow us to remove it all.\r\n * It's very helpful for die() method of instances\r\n * @TODO add to many nodes\r\n * @TODO new method like addEventListener  DOMEvents.on(node(s),event,callback,useCapture);\r\n * @constructor\r\n */\r\nvar DOMEvents = function(){\r\n    /**\r\n     * Internal storage for events\r\n     * @property {Array.<Object>} DOMEvents - dom events array\r\n     * @property {Object} DOMEvents.DOMNode -   DOM node\r\n     * @property {String} DOMEvents.eventType -   Event type\r\n     * @property {Function} DOMEvents.eventFunction -   Function\r\n     * @property {Boolean} DOMEvents.useCapture=false -   useCapture\r\n     * @property {Object} ... -   another object\r\n     * @private\r\n     */\r\n    this._DOMEventsStorage = [];\r\n};\r\n/**\r\n * Add event(s) to node(s).\r\n * @TODO add to many nodes\r\n * @param {Array.<Object>|Object} eventArray - event array or event itself\r\n * @param {Object} eventArray.DOMNode -   DOM node\r\n * @param {String} eventArray.eventType -   Event type\r\n * @param {Function} eventArray.eventFunction -   Function\r\n * @param {Boolean} [eventArray.useCapture=false] -   useCapture\r\n * @example\r\n * var DOMEventsInstance = new DOMEvents();\r\n * var eventOne = {\r\n *      DOMNode: document.getElementById(\"example\"),\r\n *      eventType: \"click\",\r\n *      eventFunction: function (e) {\r\n *          console.log(\"Hi there. Native  DOM events is:\",e);\r\n *      }\r\n * }\r\n *  var eventTwo = {\r\n *      DOMNode: document.getElementById(\"example2\"),\r\n *      eventType: \"mousedown\",\r\n *      eventFunction: function (e) {\r\n *          console.log(\"Hi there. mousedown event. Native  DOM events is:\",e);\r\n *      }\r\n * }\r\n *  DOMEventsInstance.add([eventOne,eventTwo]);\r\n */\r\nDOMEvents.prototype.add = function(eventArray){\r\n    if (Object.prototype.toString.call([]) !== \"[object Array]\"){\r\n        eventArray = [eventArray];\r\n    }\r\n    eventArray.forEach(function(val){\r\n        val.useCapture=!!(val.useCapture);\r\n        val.DOMNode.addEventListener(val.eventType,val.eventFunction,val.useCapture);\r\n        this._DOMEventsStorage.push(val);\r\n    },this)\r\n};\r\n/**\r\n * Remove events\r\n * @param {Array.<Object>} eventArray - event array\r\n * @param {Object} eventArray.DOMNode -   DOM node\r\n * @param {String} eventArray.eventType -   Event type\r\n * @param {Function} eventArray.eventFunction -   Function\r\n * @param {Boolean} [eventArray.useCapture=false] -   useCapture\r\n */\r\nDOMEvents.prototype.remove = function(eventArray){\r\n//TODO IMPLEMENT\r\n    // TODO не уверен что этот метод необходим. если надо часто убирать какието обработчики, то лучше поставить обработчки на родителя\r\n    console.warn(\"TODO IMPLEMENT\");\r\n\r\n};\r\n/**\r\n * Remove all dom events registered with this instance (added by method add)\r\n * @example\r\n * //look at add method as first part of this code\r\n * DOMEventsInstance.removeAll();\r\n */\r\nDOMEvents.prototype.removeAll = function(){\r\n    this._DOMEventsStorage.forEach(function(val){\r\n        val.DOMNode.removeEventListener(val.eventType,val.eventFunction,val.useCapture);\r\n    });\r\n    this._DOMEventsStorage=[];\r\n};\r\n\r\nmodule.exports = DOMEvents;","\"use strict\";\r\n\r\n/**\r\n * This object try to be easy as FormData.\r\n * Please note this is not(!) a shim for Form data, because it's impossible (you should set headers for Ajax by hands)\r\n * It take object and can convert it string like FormData do. Then you can send this string by Ajax or do some other staff.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/FormData\r\n * @param {Object} [data] object with data (supports nested objects)\r\n * @param {String} [boundary] boundary  for Form Data\r\n * @constructor\r\n * @example\r\n * var formData = new LikeFormData({testKey:\"testValue\"},\"testBoundary\");\r\n * formData.toString();\r\n * // Returns:\r\n * //\"--testBoundary\r\n * //Content-Disposition: form-data; name=testKey\r\n * //\r\n * // testValue\r\n * //--testBoundary--\r\n * //\"\r\n *\r\n * @example\r\n * var formData = new LikeFormData({testKey:\"testValue\"});\r\n * formData.toString();\r\n * // Returns:\r\n * //\"--SpiralFormData-4935309085994959\r\n * //Content-Disposition: form-data; name=testKey\r\n * //\r\n * // testValue\r\n * //--SpiralFormData-4935309085994959--\r\n * //\"\r\n *\r\n * @example\r\n * var formData = new LikeFormData({testKey:\"testValue\"});\r\n * formData.append(\"key2\",\"val2\");\r\n * formData.toString();\r\n * // Returns:\r\n * //--SpiralFormData-988681384595111\r\n * //Content-Disposition: form-data; name=testKey\r\n * //\r\n * //testValue\r\n * //--SpiralFormData-988681384595111\r\n * //Content-Disposition: form-data; name=key2\r\n * //\r\n * //val2\r\n * //--SpiralFormData-988681384595111--\r\n * //\"\r\n */\r\nvar LikeFormData = function (data, boundary) {\r\n    this.data = {};\r\n    if (data) {\r\n        if (Object.prototype.toString.call(data) !== \"[object Object]\") {//non object/ Alert developer\r\n            console.warn(\"LikeFormData can't accept non Object. Please reefer to documentation. Problem parameter is:\", data);\r\n        } else {\r\n            this.data = data;\r\n        }\r\n    }\r\n    this.boundary = (boundary) ? boundary : (\"SpiralFormData-\" + Math.random().toString().substr(2));\r\n\r\n\r\n    //if (!isOldIE) {\r\n    //    this.boundary = \"SpiralAjax-\" + Math.random().toString().substr(2);\r\n    //    //xhr.setRequestHeader(\"content-type\", \"multipart/form-data; charset=utf-8; boundary=\" + this.boundary);\r\n    //} else {\r\n    //    this.boundary = \"SpiralAjax-oldIE9876gsloiHGldowu\";\r\n    //}\r\n\r\n};\r\n/**\r\n * Append data to storage. Like standart FormData do.\r\n * @param {String} key\r\n * @param {String} val\r\n * @example\r\n * var formData = new FormData();\r\n * formData.append(\"key2\",\"val2\");\r\n */\r\nLikeFormData.prototype.append = function (key, val) {\r\n    //https://developer.mozilla.org/en-US/docs/Web/API/FormData\r\n    //TODO ***Appends a new value**** onto an existing key inside a FormData object, or adds the key if it does not already exist.\r\n    this.data[key] = val;\r\n};\r\n\r\n/**\r\n * convert to string\r\n * @example\r\n * var formData = new LikeFormData({testKey:\"testValue\"});\r\n * formData.toString();\r\n * // Returns:\r\n * //\"--SpiralFormData-4935309085994959\r\n * //Content-Disposition: form-data; name=testKey\r\n * //\r\n * // testValue\r\n * //--SpiralFormData-4935309085994959--\r\n * //\"\r\n */\r\nLikeFormData.prototype.toString = function () {\r\n    var retString = \"\";\r\n    var boundary = this.boundary;\r\n    var iterate = function (data, partOfKey) {\r\n        for (var key in data) {\r\n            if (data.hasOwnProperty(key) && (typeof data[key] !== \"undefined\" )) {\r\n                if (typeof data[key] === \"object\") {\r\n                    iterate(data[key], ((partOfKey.length === 0) ? key : (partOfKey + \"[\" + key + \"]\")));\r\n                } else {\r\n                    retString += \"--\" + boundary\r\n                        + \"\\r\\nContent-Disposition: form-data; name=\" + ((partOfKey.length === 0) ? key : (partOfKey + \"[\" + key + \"]\"))\r\n                        + \"\\r\\n\\r\\n\" + data[key] + \"\\r\\n\";\r\n                }\r\n            }\r\n        }\r\n    };\r\n    if (typeof this.data !== \"object\") {\r\n        this.data = {\r\n            data: this.data\r\n        }\r\n    }\r\n    iterate(this.data, \"\");\r\n\r\n\r\n    retString += \"--\" + this.boundary + \"--\\r\\n\";\r\n    return retString;\r\n};\r\n\r\n/**\r\n * The delete() method of the FormData interface deletes a key/value pair from a FormData object.\r\n * @param key\r\n */\r\nLikeFormData.prototype.delete = function (key) {\r\n    return delete(this.data[key]);\r\n};\r\n\r\n\r\n/**\r\n *The get() method of the FormData interface returns the first value associated with a given key from within a FormData object.\r\n * @param key\r\n */\r\nLikeFormData.prototype.get = function (key) {\r\n    return this.data[key];\r\n};\r\n/**\r\n *The getAll() method of the FormData interface returns the first value associated with a given key from within a FormData object.\r\n */\r\nLikeFormData.prototype.getAll = function () {\r\n    return this.data;\r\n};\r\n\r\n/**\r\n * The has() method of the FormData interface returns a boolean stating whether a FormData object contains a certain key/value pair.\r\n * @param key\r\n */\r\nLikeFormData.prototype.has = function(key){\r\n    return this.data.hasOwnProperty(key);\r\n};\r\n\r\n/**\r\n * The difference between set() and FormData.append is that if the specified header does already exist, set() will overwrite the existing value with the new one, whereas FormData.append will append the new value onto the end of the set of values.\r\n * @param val\r\n */\r\nLikeFormData.prototype.set = function(val){\r\n    this.data[key] = val;\r\n};\r\n\r\n/**\r\n * Get content header to set for Ajax. Not a part of standart FormData object. But for sending Like FormData over Ajax you should know header.\r\n * @return {string}\r\n * @example\r\n * var formData = new LikeFormData();\r\n * formData.getContentTypeHeader(); //return \"multipart/form-data; charset=utf-8; boundary=SpiralFormData-988681384595111\"\r\n * @example\r\n * var formData = new LikeFormData({key:\"val2\"},\"testBoundary\");\r\n * formData.getContentTypeHeader(); //return \"multipart/form-data; charset=utf-8; boundary=testBoundary\"\r\n */\r\nLikeFormData.prototype.getContentTypeHeader = function () {\r\n    return \"multipart/form-data; charset=utf-8; boundary=\" + this.boundary;\r\n\r\n};\r\n\r\n\r\nmodule.exports = LikeFormData;","/**\r\n This is a collection of useful DOM tools.\r\n */\r\n\r\nmodule.exports = {\r\n\r\n    /**\r\n     * Found first parent node with matched selector(s)\r\n     * @param {Object} elem - dom node\r\n     * @param {String|Array} selectors - selector or array of selectors\r\n     * @returns {Object| Boolean} - node or false\r\n     */\r\n\r\n    closest: function (elem, selectors) {\r\n        selectors = (typeof selectors === 'string') ? [selectors] : selectors;\r\n        var key,\r\n            l = selectors.length,\r\n            matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;\r\n        while (elem && elem.parentNode) {\r\n            for (key = 0; key < l; key++) {\r\n                if (matchesSelector.call(elem, selectors[key])) {\r\n                    return elem;\r\n                }\r\n            }\r\n            elem = elem.parentNode;\r\n        }\r\n        return false;\r\n    },\r\n    /**\r\n     * Found first parent node with matched className(s).\r\n     * TODO Why this? Because old IE....\r\n     * TODO It's not good, because it's a copy of closest @see closest. Refactor\r\n     * @param {Object} elem - dom node\r\n     * @param {String|Array} className - className or array of classNames\r\n     * @returns {Object| Boolean} - node or false\r\n     */\r\n\r\n    closestByClassName: function (elem, className) {\r\n        className = (typeof className === 'string') ? [className] : className;\r\n        var key,\r\n            l = className.length;\r\n        //,matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;\r\n        while (elem && elem.parentNode) {\r\n            for (key = 0; key < l; key++) {\r\n                var reg = new RegExp(\"(\\\\s|^)\" + className[key] + \"(\\\\s|$)\");\r\n                if (elem.className.match(reg)) {\r\n                    return elem;\r\n                }\r\n            }\r\n            elem = elem.parentNode;\r\n        }\r\n        return false;\r\n    }\r\n};","\"use strict\";\r\n\r\n/**\r\n * @module tools\r\n * @namespace\r\n */\r\nvar tools = {\r\n    /**\r\n     * Merge multiple object into one object. Method will iterate over arguments and on conflict (key already exist in object) key will be overwrite\r\n     * @param {Array} arguments\r\n     * @param {Object} arguments.0 first object to merge\r\n     * @param {Object} arguments.1 second object to merge\r\n     * @param {Object} arguments.n n object to merge\r\n     * @returns {Object}\r\n     * @example\r\n     * var obj1 = {\r\n     *      key1:1\r\n     * }\r\n     * var obj2 = {\r\n     *      key2:2\r\n     * }\r\n     * extend(obj1,obj2);  //return object {key1:1,key2:2}\r\n     * @example\r\n     * var obj1 = {\r\n     *      key:1\r\n     * }\r\n     * var obj2 = {\r\n     *      key:2\r\n     * }\r\n     * extend(obj1,obj2);  //return object {key:2}\r\n     * @example\r\n     * var obj1 = {\r\n     *      key:1\r\n     * }\r\n     * var obj2 = {\r\n     *      key:2\r\n     * }\r\n     * var obj3 = {\r\n     *      key3:3\r\n     * }\r\n     * extend(obj1,obj2,obj3);  //return object {key:2,key3:3}\r\n     *\r\n     */\r\n    extend: function () {\r\n        var retObj = {};\r\n        var attribute;\r\n        for (var n = 0; n < arguments.length; n++) {\r\n            if (Object.prototype.toString.call(arguments[n]) !== \"[object Object]\") {\r\n                console.warn(\"Merging allowed only for objects. Passed value:\", arguments[n]);\r\n                continue;\r\n            }\r\n            for (attribute in arguments[n]) {\r\n                retObj[attribute] = arguments[n][attribute];\r\n            }\r\n        }\r\n        return retObj;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = tools;","\"use strict\";\r\n//plugin in formMessages to iterate form inputs\r\n\r\n//todo comment all of this\r\n//todo ask @Systerr the reason of variable 'prefix'\r\nvar notFound = [];\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} context\r\n * @param {Object} names\r\n * @param {Function} callback\r\n * @param {String} [prefix]\r\n */\r\nfunction findNodes(context, names, callback, prefix) {\r\n    for (var name in names) {\r\n        if (!names.hasOwnProperty(name)) {\r\n            continue;\r\n        }\r\n\r\n        var partOfSelector = (prefix) ? prefix + \"[\" + name + \"]\" : name,\r\n            type = Object.prototype.toString.call(names[name]),\r\n            selector = \"[name='\" + partOfSelector + \"']\";\r\n        switch (type) {\r\n            case '[object Object]':\r\n                findNodes(context, names[name], callback, partOfSelector);//call recursive\r\n                break;\r\n            case '[object Array]':\r\n                names[name].forEach(function (el) {\r\n                    \"use strict\";\r\n                    //TODO refactor this should call recursive\r\n                    var sel = \"[name='\" + partOfSelector + \"[]']\" + \"[value='\" + el + \"']\";\r\n                    var nodes = context.querySelectorAll(sel);\r\n                    if (nodes.length === 0) {\r\n                        console.warn(sel, \" in Array not found\");\r\n                        notFound.push(sel);\r\n                    }\r\n                    for (var i = 0, max = nodes.length; i < max; i++) {\r\n                        callback(nodes[i], true);\r\n                    }\r\n                });\r\n                break;\r\n            case '[object String]':\r\n            case '[object Number]':\r\n                var nodes = context.querySelectorAll(selector);\r\n                if (nodes.length === 0) {\r\n                    console.warn(selector, \" not found\");\r\n                    var obj = {};\r\n                    obj[partOfSelector] = names[name];\r\n                    notFound.push(obj);\r\n                }\r\n                for (var i = 0, max = nodes.length; i < max; i++) {\r\n                    callback(nodes[i], names[name]);\r\n                }\r\n                break;\r\n\r\n            default :\r\n                console.error(\"unknown type -\", type, \" and message\", names[name]);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} context\r\n * @param {Object} names\r\n * @param {Function} callback\r\n * @param {String} [prefix]\r\n */\r\nvar iterateInputs = function (context, names, callback, prefix) {\r\n    notFound = [];\r\n    findNodes(context, names, callback, prefix);\r\n    if (notFound.length !== 0) {\r\n        console.log(\"Some element not found in form\", notFound);\r\n    }\r\n    return notFound;\r\n};\r\n\r\nmodule.exports = iterateInputs;","\"use strict\";\r\n//https://github.com/spiral/sf.js\r\n\r\n//Add console shim for old IE\r\nrequire(\"./shim/console\");\r\nrequire(\"./shim/Object.assign\");\r\n\r\nvar _sf;\r\n\r\nif (typeof sf !== 'undefined' && Object.prototype.toString.call(sf) === \"[object Object]\") {\r\n    _sf = Object.assign(sf, require(\"./sf\"));\r\n} else {\r\n    _sf = require(\"./sf\");\r\n}\r\n\r\nif (!_sf.hasOwnProperty('options')) _sf.options = {instances:{}};\r\nif (!_sf.options.hasOwnProperty('instances')) _sf.options.instances = {};\r\n\r\n//todo delete this in future\r\nif (!window.hasOwnProperty(\"sf\")) {//bind only if  window.sf is empty to avoid conflicts with other libs\r\n    window.sf = _sf;\r\n}\r\n\r\n_sf.instancesController = new _sf.core.InstancesController(sf);\r\n_sf.domMutation = new _sf.core.DomMutations(_sf.instancesController);\r\n\r\n//Events system\r\n_sf.events = new _sf.core.Events();\r\nrequire(\"./core/events/baseEvents.js\")(_sf.events);\r\n\r\n//AJAX\r\n_sf.ajax = new _sf.core.Ajax(window.csrfToken ? {//TODO move to spiral bindings\r\n    headers: {\r\n        \"X-CSRF-Token\": window.csrfToken\r\n    }\r\n} : null);\r\nrequire(\"./core/ajax/baseActions.js\")(_sf);\r\n\r\n//Form\r\n_sf.tools.iterateInputs = require(\"./helpers/tools/iterateInputs.js\");\r\n_sf.modules.helpers.tools.iterateInputs = _sf.tools.iterateInputs;//todo remove\r\nrequire(\"./vendor/formToObject\");\r\nrequire(\"./instances/form/Form.js\");\r\nrequire(\"./instances/lock/Lock.js\");\r\n\r\nif (typeof exports === \"object\" && exports) {\r\n    module.exports = _sf;\r\n}","\"use strict\";\r\n\r\n(function (sf) {\r\n    var formMessages = require(\"./formMessages\");\r\n\r\n    /**\r\n     * Spiral Forms\r\n     * @param {Object} sf\r\n     * @param {Object} node  DomNode of form\r\n     * @param {Object} [options] all options to override default\r\n     * @constructor Form\r\n     * @extends BaseDOMConstructor\r\n     */\r\n    var Form = function (sf, node, options) {\r\n        this._construct(sf, node, options);\r\n    };\r\n\r\n\r\n    /**\r\n     * @lends sf.Form.prototype\r\n     */\r\n    Form.prototype = Object.create(sf.modules.core.BaseDOMConstructor.prototype);\r\n\r\n    /**\r\n     * Name to register\r\n     * @type {string}\r\n     */\r\n    Form.prototype.name = \"form\";\r\n\r\n    /**\r\n     * Function that call on new instance is created.\r\n     * @param {Object} sf\r\n     * @param {Object} node  DomNode of form\r\n     * @param {Object} [options] all options to override default\r\n     * @private\r\n     */\r\n    Form.prototype._construct = function (sf, node, options) {\r\n        this.init(sf, node, options);//call parent\r\n        this.mixMessagesOptions();\r\n        //this.options.fillFrom && this.fillFieldsFrom();//id required to fill form\r\n\r\n        /**\r\n         * @extends DOMEvents\r\n         * @type {DOMEvents}\r\n         * @inheritDoc\r\n         * */\r\n        this.DOMEvents = new this.sf.modules.helpers.DOMEvents();\r\n        this.addEvents();\r\n\r\n        this.events = new this.sf.modules.core.Events([\"beforeSend\", \"success\", \"error\", \"always\"]);\r\n    };\r\n\r\n    /**\r\n     * @override\r\n     * @inheritDoc\r\n     * @enum {Object}\r\n     * @deprecated\r\n     */\r\n    Form.prototype.optionsToGrab = {\r\n        /**\r\n         * Link to form\r\n         */\r\n        \"context\": {\r\n            \"processor\": function (node, val) { //processor\r\n                return node;\r\n            }\r\n        },\r\n        /**\r\n         * Link to 'this'\r\n         */\r\n        self: {\r\n            \"processor\": function (node, val) {\r\n                return this;\r\n            }\r\n        },\r\n        /**\r\n         * URL to send form (if ajax form) <b>Default: \"/\"</b>\r\n         */\r\n        \"url\": {\r\n            \"domAttr\": \"action\",\r\n            \"value\": \"/\"\r\n        },\r\n        /**\r\n         * Method to send to send form (if ajax form) <b>Default: \"POST\"</b>\r\n         */\r\n        \"method\": {\r\n            \"domAttr\": \"method\",\r\n            \"value\": \"POST\"\r\n        },\r\n        /**\r\n         * Lock type when form sending <b>Default: \"default\"</b> @see sf.lock\r\n         */\r\n        \"lockType\": {\r\n            \"value\": \"default\",\r\n            \"domAttr\": \"data-lockType\"\r\n        },\r\n        /**\r\n         *\r\n         */\r\n        \"messagesType\": {\r\n            \"value\": \"spiral\",\r\n            \"domAttr\": \"data-messagesType\"\r\n        },\r\n        /**\r\n         * Pass custom template for form messages\r\n         */\r\n        \"messages\": {\r\n            \"value\": \"\",\r\n            \"domAttr\": \"data-messages\",\r\n            \"processor\": function (node, val, self) {\r\n                if (!val) return this.value;\r\n                if (typeof val == \"string\") {\r\n                    try {\r\n                        val = JSON.parse(val);\r\n                    } catch (e) {\r\n                        console.error(\"Form JSON.parse error: \", e);\r\n                    }\r\n                }\r\n                return Object.assign(self.value, val);\r\n            }\r\n        },\r\n        /**\r\n         * Use ajax to submit form <b>Default: true</b>\r\n         */\r\n        \"useAjax\": {// attribute of form\r\n            \"value\": true, //default value\r\n            \"domAttr\": \"data-useAjax\",\r\n            \"processor\": function (node, val) { // processor to process data before return\r\n                if (typeof val === \"boolean\") {\r\n                    return val;\r\n                }\r\n                val = (val !== void 0 && val !== null) ? val.toLowerCase() : '';\r\n                if (val === 'false') {\r\n                    val = false;\r\n                } else if (val === 'true') {\r\n                    val = true;\r\n                }\r\n                return val;\r\n            }\r\n        },\r\n        /**\r\n         * Callback after form submitting <b>Default: false</b>\r\n         * <br/>\r\n         * <b> Example </b>\r\n         * function(options){\r\n     *  //options contains all options after send\r\n     * }\r\n         */\r\n        \"ajaxCallback\": {// attribute of form\r\n            \"value\": false, //default value\r\n            \"domAttr\": \"data-callback\"\r\n        },\r\n        \"beforeSubmitCallback\": {// attribute of form\r\n            \"value\": false, //default value\r\n            \"domAttr\": \"data-before-submit\"\r\n        },\r\n        \"afterSubmitCallback\": {// attribute of form\r\n            \"value\": false, //default value\r\n            \"domAttr\": \"data-after-submit\"\r\n        },\r\n        \"headers\": {// attribute of form\r\n            \"value\": {\"Accept\": \"application/json\"}, //default value\r\n            \"domAttr\": \"data-headers\",\r\n            \"processor\": function (node, val, self) {\r\n                if (val === void 0 || val == null) return this.value;\r\n                if (typeof val == \"string\") {\r\n                    try {\r\n                        val = JSON.parse(val);\r\n                    } catch (e) {\r\n                        console.error(\"Form JSON.parse error: \", e);\r\n                    }\r\n                }\r\n                return Object.assign(self.value, val);\r\n            }\r\n        }\r\n    };\r\n\r\n    Form.prototype.mixMessagesOptions = function () {\r\n        var global = this.sf.options.instances.form;\r\n        this.options.messages = Object.assign({},\r\n            formMessages.defaults,\r\n            global && global.messages && global.messages[this.options.messagesType],\r\n            this.options.messages\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Call on form submit\r\n     * @param {Event} e submit event\r\n     */\r\n    Form.prototype.onSubmit = function (e) {\r\n        if (this.sf.instancesController.getInstance('lock', this.node)) {//on lock we should'n do any actions\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            return;\r\n        }\r\n\r\n        this.removeMessages();\r\n\r\n        this.options.data = this.getFormData();\r\n\r\n        // We can send files only with FormData\r\n        // If form contain files and no FormData than disable ajax\r\n        if (!window.FormData && this.options.context.querySelectorAll(\"input[type='file']\").length !== 0) {\r\n            this.options.useAjax = false;\r\n        }\r\n        this.events.trigger(\"beforeSend\", this.options);\r\n        //sf.events.performAction(\"beforeSubmit\", this.options);\r\n        //this.events.performAction(\"beforeSubmit\", this.options);\r\n\r\n        if (this.options.useAjax) {\r\n\r\n            this.send(this.options);\r\n\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Locker. Add or remove.\r\n     * @param {Boolean} [remove]\r\n     */\r\n    Form.prototype.lock = function (remove) {\r\n        if (!this.options.lockType || this.options.lockType === 'none') {\r\n            return;\r\n        }\r\n        if (remove) {\r\n            if (!this.sf.instancesController.removeInstance(\"lock\", this.node)) {\r\n                console.warn(\"You try to remove 'lock' instance, but it is not available or not started\");\r\n            }\r\n        } else {\r\n            if (!this.sf.instancesController.addInstance(\"lock\", this.node, {type: this.options.lockType})) {\r\n                console.warn(\"You try to add 'lock' instance, but it is not available or already started\");\r\n            }\r\n        }\r\n    };\r\n\r\n    //Form messages\r\n    Form.prototype.showFormMessage = formMessages.showFormMessage;\r\n    Form.prototype.showFieldMessage = formMessages.showFieldMessage;\r\n    Form.prototype.showFieldsMessages = formMessages.showFieldsMessages;\r\n    Form.prototype.showMessages = formMessages.showMessages;\r\n    Form.prototype.removeMessages = formMessages.removeMessages;\r\n    Form.prototype.removeMessage = formMessages.removeMessage;\r\n\r\n    Form.prototype.processAnswer = function (answer) {\r\n        this.options.messagesType && this.showMessages(answer);\r\n    };\r\n\r\n    /**\r\n     * Send form to server\r\n     * @param sendOptions\r\n     */\r\n    Form.prototype.send = function (sendOptions) {\r\n        var that = this;\r\n        this.lock();\r\n        if (sendOptions.beforeSubmitCallback) {\r\n            var fn = eval(sendOptions.beforeSubmitCallback);\r\n            if (typeof(fn) === \"function\") {\r\n                fn.call(sendOptions);\r\n            }\r\n        }\r\n        this.sf.ajax.send(sendOptions).then(\r\n            function (answer) {\r\n                that.events.trigger(\"success\", sendOptions);\r\n                return answer;\r\n            },\r\n            function (error) {\r\n                that.events.trigger(\"error\", sendOptions);\r\n                return error;\r\n            }).then(function (answer) {\r\n            that.lock(true);\r\n            that.processAnswer(answer);\r\n            that.events.trigger(\"always\", sendOptions);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Serialize form\r\n     */\r\n    Form.prototype.getFormData = function () {\r\n        if (!!window.FormData) {\r\n            return new FormData(this.options.context);\r\n        } else {\r\n            console.log(\"Form `\" + this.options.context + \"` were processed without FormData.\");\r\n            return new formToObject(this.options.context);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Set options (overwrite current)\r\n     * @param {Object} opt options\r\n     */\r\n    Form.prototype.setOptions = function (opt) {\r\n        this.options = this.sf.modules.helpers.tools.extend(this.options, opt);\r\n    };\r\n\r\n    /**\r\n     * Add all events for forms\r\n     */\r\n    Form.prototype.addEvents = function () {\r\n        var that = this;\r\n        this.DOMEvents.add([\r\n            {\r\n                DOMNode: this.options.context,\r\n                eventType: \"submit\",\r\n                eventFunction: function (e) {\r\n                    that.onSubmit.call(that, e)\r\n                }\r\n            }\r\n        ]);\r\n    };\r\n\r\n    /**\r\n     * Clear all variables and die\r\n     */\r\n    Form.prototype.die = function () {\r\n        this.DOMEvents.removeAll();\r\n        //todo don't we need to remove it's addons and plugins?\r\n    };\r\n\r\n    /**\r\n     * Register form\r\n     */\r\n    sf.instancesController.registerInstanceType(Form, \"js-sf-form\");\r\n\r\n})(sf);","\"use strict\";\r\nvar iterateInputs = require(\"../../helpers/tools/iterateInputs\");\r\nvar domTools = require(\"../../helpers/domTools\");\r\n\r\nvar defaults = {\r\n    template: '<div class=\"alert form-msg ${type}\"><button class=\"btn-close\">×</button><p class=\"msg\">${text}</p></div>',\r\n    close: '.btn-close',\r\n    place: 'bottom',\r\n    levels: {\r\n        success: \"success\", info: \"info\", warning: \"warning\", error: \"error\"\r\n    },\r\n    field: '.item-form',\r\n    fieldTemplate: '<div class=\"alert form-msg ${type}\"><p class=\"msg\">${text}</p></div>',\r\n    fieldClose: '.btn-close',\r\n    fieldPlace: 'bottom',\r\n    fieldPrefix: ''//for bootstrap: class=\"has-danger\"\r\n};\r\n\r\n//often used alias\r\ndefaults.levels.message = defaults.levels.success;\r\n\r\n//other aliases\r\n//PSR-3 severity levels mapping (debug, info, notice, warning, error, critical, alert, emergency)\r\n//https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md\r\ndefaults.levels.debug = defaults.levels.success;\r\ndefaults.levels.info = defaults.levels.notice = defaults.levels.info;\r\ndefaults.levels.danger = defaults.levels.critical = defaults.levels.alert = defaults.levels.emergency = defaults.levels.error;\r\n\r\nfunction prepareMessageObject(message, type) {\r\n    if (Object.prototype.toString.call(message) !== \"[object Object]\") {\r\n        message = {text: message, type: type};\r\n    }\r\n    message.text = message.text || message.message || message;\r\n    message.type = message.type || type;\r\n    return message;\r\n}\r\n\r\nmodule.exports = {\r\n    defaults: defaults,\r\n    showMessages: function (answer) {\r\n        if (!answer) return;\r\n        var isMsg = false, that = this;\r\n\r\n        for (var type in this.options.messages.levels) {\r\n            if (answer[type]) {\r\n                this.showFormMessage(answer[type], this.options.messages.levels[type]);\r\n                isMsg = true;\r\n            }\r\n        }\r\n\r\n        if (answer.messages) {\r\n            this.showFieldsMessages(answer.messages, \"success\");\r\n            isMsg = true;\r\n        }\r\n        if (answer.errors) {\r\n            this.showFieldsMessages(answer.errors, \"error\");\r\n            isMsg = true;\r\n        }\r\n        if (answer.warnings) {\r\n            this.showFieldsMessages(answer.warnings, \"warning\");\r\n            isMsg = true;\r\n        }\r\n\r\n        if (!isMsg) {\r\n            var error = answer.status ? answer.status + \" \" : \"\";\r\n            error += answer.statusText ? answer.statusText : \"\";\r\n            error += answer.data && !answer.statusText ? answer.data : \"\";\r\n            error += error.length === 0 ? answer : \"\";\r\n            this.showFormMessage(error, \"error\");\r\n        }\r\n\r\n        this._messages.forEach(function (m) {\r\n            if (m.close) {\r\n                m.closeHandler = that.removeMessage.bind(that, m);\r\n                m.close.addEventListener(\"click\", m.closeHandler);\r\n            }\r\n        });\r\n    },\r\n    removeMessage: function (m, e) {\r\n        m.close && m.close.removeEventListener(\"click\", m.closeHandler);\r\n        m.el.parentNode.removeChild(m.el);\r\n        m.field && m.field.classList.remove(this.options.messages.fieldPrefix + m.type);\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            this._messages.splice(this._messages.indexOf(m), 1);\r\n        }\r\n    },\r\n    removeMessages: function () {\r\n        var that = this;\r\n        if (this._messages) {\r\n            this._messages.forEach(function (m) {\r\n                that.removeMessage(m, false);\r\n            });\r\n        }\r\n        that._messages = [];\r\n    },\r\n    showFormMessage: function (message, type) {\r\n        message = prepareMessageObject(message, type);\r\n\r\n        var msgEl, parent, tpl = this.options.messages.template, parser = new DOMParser();\r\n\r\n        for (var item in message) {\r\n            if (!message.hasOwnProperty(item)) return;\r\n            tpl = tpl.replace('${' + item + '}', message[item]);\r\n        }\r\n\r\n        msgEl = parser.parseFromString(tpl, \"text/html\").firstChild.lastChild.firstChild;\r\n\r\n        if (this.options.messages.place === \"bottom\") {\r\n            this.node.appendChild(msgEl);\r\n        } else if (this.options.messages.place === \"top\") {\r\n            this.node.insertBefore(msgEl, this.node.firstChild);\r\n        } else {\r\n            parent = document.querySelector(this.options.messages.place);\r\n            parent.appendChild(msgEl)\r\n        }\r\n        this._messages.push({el: msgEl, close: msgEl.querySelector(this.options.messages.close)});\r\n    },\r\n    showFieldMessage: function (el, message, type) {\r\n        var field = domTools.closest(el, this.options.messages.field), msgEl, tpl = this.options.messages.fieldTemplate;\r\n        if (!field) return;\r\n        var parser = new DOMParser();\r\n        message = prepareMessageObject(message, type);\r\n\r\n        field.classList.add(this.options.messages.fieldPrefix + type);\r\n\r\n        for (var item in message) {\r\n            if (!message.hasOwnProperty(item)) return;\r\n            tpl = tpl.replace('${' + item + '}', message[item]);\r\n        }\r\n\r\n        msgEl = parser.parseFromString(tpl, \"text/html\").firstChild.lastChild.firstChild;\r\n\r\n        if (this.options.messages.fieldPlace === \"bottom\") {\r\n            field.appendChild(msgEl);\r\n        } else if (this.options.messages.fieldPlace === \"top\") {\r\n            field.insertBefore(msgEl, field.firstChild);\r\n        } else {\r\n            field = field.querySelector(this.options.messages.fieldPlace);\r\n            field.appendChild(msgEl)\r\n        }\r\n\r\n        this._messages.push({\r\n            el: msgEl,\r\n            close: msgEl.querySelector(this.options.messages.fieldClose),\r\n            field: field,\r\n            type: type\r\n        });\r\n    },\r\n    showFieldsMessages: function (messages, type) {\r\n        var that = this,\r\n            notFound = iterateInputs(this.node, messages, function (el, message) {\r\n                that.showFieldMessage(el, message, type)\r\n            });\r\n        //todo data-name for notFound\r\n    }\r\n};","\"use strict\";\r\n\r\n(function(sf) {\r\n    /**\r\n     * Spiral lock for forms\r\n     * @constructor Lock\r\n     */\r\n\r\n    var Lock = function(sf, node, options){\r\n        this._construct(sf, node, options);\r\n    };\r\n\r\n    /**\r\n     * @lends Lock.prototype\r\n     */\r\n    Lock.prototype = Object.create(sf.modules.core.BaseDOMConstructor.prototype);\r\n\r\n    /**\r\n     * Name of module\r\n     * @type {string}\r\n     */\r\n    Lock.prototype.name = \"lock\";\r\n\r\n    /**\r\n     * Function that call on new instance is created.\r\n     * @param {Object} sf\r\n     * @param {Object} node  DomNode of form\r\n     * @param {Object} [options] all options to override default\r\n     * @private\r\n     */\r\n    Lock.prototype._construct = function(sf, node, options){\r\n        this.init(sf, node, options);//call parent\r\n        this.add(this.options.type,this.node);\r\n    };\r\n    /**\r\n     * Add lock\r\n     * @param {String} [type] type of lock @see sf.lock.types\r\n     * @param {Object} context context to add lock\r\n     * @returns {Function|*}\r\n     */\r\n    Lock.prototype.add =function(type, context){\r\n        if (!this.types.hasOwnProperty(type)){\r\n            return false;\r\n        }\r\n        var node = document.createElement(\"div\");\r\n        node.className = this.types[type].className || 'js-sf-lock';\r\n        node.innerHTML = this.types[type].html;\r\n        context.appendChild(node);\r\n        context.classList.add(\"locked\");\r\n        return this.types[type].progress;\r\n    };\r\n    /**\r\n     * Clear all variables and die\r\n     */\r\n    Lock.prototype.die = function () {\r\n        this.remove();\r\n    };\r\n    /**\r\n     * Remove lock\r\n     */\r\n    Lock.prototype.remove = function(){\r\n        this.node.classList.remove(\"locked\");\r\n        var sfLock = this.node.querySelector(\".js-sf-lock\");//todo this.lockNode ?\r\n        if (sfLock) {\r\n            this.node.removeChild(sfLock);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Object with lock types.\r\n     * @enum {Object}\r\n     */\r\n    Lock.prototype.types  = {\r\n        /**\r\n         * @type {Object}\r\n         */\r\n        spinner: {\r\n            /**\r\n             * HTML\r\n             * @inner\r\n             * @type String\r\n             */\r\n            html: '<div class=\"sf-spinner\"></div>'\r\n        },\r\n        progress: {\r\n            /**\r\n             * HTML\r\n             * @inner\r\n             * @type String\r\n             */\r\n            html: '<div class=\"sf-progress\"><div class=\"progress-line\"></div></div>',\r\n            /**\r\n             * Function to change styles while AJAX progress\r\n             * @param current\r\n             * @param total\r\n             */\r\n            progress: function (current, total) {\r\n                var progress = this.context.getElementsByClassName(\"progress-line\")[0];\r\n                progress.style.width = 100 * (current / total) + \"%\";\r\n            }\r\n        }\r\n    };\r\n\r\n    //we have to have some default locker, let it be spinner\r\n    Lock.prototype.types.default = Lock.prototype.types.spinner;\r\n\r\n    /**\r\n     * Register lock\r\n     */\r\n    sf.instancesController.registerInstanceType(Lock);\r\n\r\n})(sf);\r\n","var core = {\r\n    Ajax: require(\"./core/Ajax\"),\r\n    BaseDOMConstructor: require(\"./core/BaseDOMConstructor\"),\r\n    DomMutations: require(\"./core/DomMutations\"),\r\n    Events: require(\"./core/Events\"),\r\n    InstancesController: require(\"./core/InstancesController\")\r\n};\r\n\r\nvar helpers = {\r\n    DOMEvents: require(\"./helpers/DOMEvents\"),\r\n    domTools: require(\"./helpers/domTools\"),\r\n    LikeFormData: require(\"./helpers/LikeFormData\"),\r\n    tools: require(\"./helpers/tools\")\r\n};\r\n\r\nvar sf = {\r\n    core: core,\r\n    helpers: helpers,\r\n    tools: helpers.tools,\r\n    modules: {//todo remove this when removed in dependencies\r\n        'WILL_BE_DEPRECATED': true,\r\n        core: core,\r\n        helpers: helpers\r\n    }\r\n};\r\n\r\nmodule.exports = sf;","/**\r\n * Object.assign polyfill\r\n * https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n */\r\nif (typeof Object.assign != 'function') {\r\n    (function () {\r\n        Object.assign = function (target) {\r\n            'use strict';\r\n            if (target === undefined || target === null) {\r\n                throw new TypeError('Cannot convert undefined or null to object');\r\n            }\r\n\r\n            var output = Object(target);\r\n            for (var index = 1; index < arguments.length; index++) {\r\n                var source = arguments[index];\r\n                if (source !== undefined && source !== null) {\r\n                    for (var nextKey in source) {\r\n                        if (source.hasOwnProperty(nextKey)) {\r\n                            output[nextKey] = source[nextKey];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return output;\r\n        };\r\n    })();\r\n}","/**\r\n * Avoid `console` errors in browsers that lack a console.\r\n */\r\n(function () {\r\n    var method, noop = function () {\r\n        },\r\n        methods = [\r\n            'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',\r\n            'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',\r\n            'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',\r\n            'timeStamp', 'trace', 'warn'\r\n        ],\r\n        length = methods.length,\r\n        console = (window.console = window.console || {});\r\n\r\n    while (length--) {\r\n        method = methods[length];\r\n\r\n        // Only stub undefined methods.\r\n        if (!console[method]) {\r\n            console[method] = noop;\r\n        }\r\n    }\r\n}());\r\n","/*! github.com/serbanghita/formToObject.js 1.0.1  (c) 2013 Serban Ghita <serbanghita@gmail.com> @licence MIT */\r\n\r\n(function(){\r\n\r\n    // Constructor.\r\n\tvar formToObject = function( formRef ){\r\n\r\n\t\tif( !formRef ){ return false; }\r\n\r\n\t\tthis.formRef       = formRef;\r\n\t\tthis.keyRegex      = /[^\\[\\]]+/g;\r\n\t\tthis.$form         = null;\r\n\t\tthis.$formElements = [];\r\n\t\tthis.formObj       = {};\r\n\r\n\t\tif( !this.setForm() ){ return false; }\r\n\t\tif( !this.setFormElements() ){ return false; }\r\n\r\n\t\treturn this.setFormObj();\r\n\r\n\t};\r\n\r\n\t// Set the main form object we are working on.\r\n\tformToObject.prototype.setForm = function(){\r\n\r\n\t\tswitch( typeof this.formRef ){\r\n\r\n\t\t\tcase 'string':\r\n\t\t\t\tthis.$form = document.getElementById( this.formRef );\r\n\t\t\tbreak;\r\n\r\n\t\t\tcase 'object':\r\n\t\t\t\tif( this.isDomNode(this.formRef) ){\r\n\t\t\t\t\tthis.$form = this.formRef;\r\n\t\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.$form;\r\n\r\n\t};\r\n\r\n\t// Set the elements we need to parse.\r\n\tformToObject.prototype.setFormElements = function(){\r\n\t\tthis.$formElements = this.$form.querySelectorAll('input, textarea, select');\r\n\t\treturn this.$formElements.length;\r\n\t};\r\n\r\n\t// Check to see if the object is a HTML node.\r\n\tformToObject.prototype.isDomNode = function( node ){\r\n\t\treturn typeof node === \"object\" && \"nodeType\" in node && node.nodeType === 1;\r\n\t};\r\n\r\n\t// Iteration through arrays and objects. Compatible with IE.\r\n\tformToObject.prototype.forEach = function( arr, callback ){\r\n\r\n\t\tif([].forEach){\r\n\t\t\treturn [].forEach.call(arr, callback);\r\n\t\t}\r\n\r\n\t\tvar i;\r\n\t\tfor(i in arr){\r\n\t\t\t// Object.prototype.hasOwnProperty instead of arr.hasOwnProperty for IE8 compatibility.\r\n\t\t\tif( Object.prototype.hasOwnProperty.call(arr,i) ){\r\n\t\t\t\tcallback.call(arr, arr[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n    // Recursive method that adds keys and values of the corresponding fields.\r\n\tformToObject.prototype.addChild = function( result, domNode, keys, value ){\r\n\r\n\t\t// #1 - Single dimensional array.\r\n\t\tif(keys.length === 1){\r\n\r\n\t\t\t// We're only interested in the radio that is checked.\r\n\t\t\tif( domNode.nodeName === 'INPUT' && domNode.type === 'radio' ) {\r\n\t\t\t\tif( domNode.checked ){\r\n\t\t\t\t\treturn result[keys] = value;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Checkboxes are a special case. We have to grab each checked values\r\n\t\t\t// and put them into an array.\r\n\t\t\tif( domNode.nodeName === 'INPUT' && domNode.type === 'checkbox' ) {\r\n\r\n\t\t\t\tif( domNode.checked ){\r\n\r\n\t\t\t\t\tif( !result[keys] ){\r\n\t\t\t\t\t\tresult[keys] = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn result[keys].push( value );\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Multiple select is a special case.\r\n\t\t\t// We have to grab each selected option and put them into an array.\r\n\t\t\tif( domNode.nodeName === 'SELECT' && domNode.type === 'select-multiple' ) {\r\n\r\n\t\t\t\tresult[keys] = [];\r\n\t\t\t\tvar DOMchilds = domNode.querySelectorAll('option[selected]');\r\n\t\t\t\tif( DOMchilds ){\r\n\t\t\t\t\tthis.forEach(DOMchilds, function(child){\r\n\t\t\t\t\t\tresult[keys].push( child.value );\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Fallback. The default one to one assign.\r\n\t\t\tresult[keys] = value;\r\n\r\n\t\t}\r\n\r\n\t\t// #2 - Multi dimensional array.\r\n\t\tif(keys.length > 1) {\r\n\r\n\t\t\tif(!result[keys[0]]){\r\n\t\t\t\tresult[keys[0]] = {};\r\n\t\t\t}\r\n\r\n\t\t\treturn this.addChild(result[keys[0]], domNode, keys.splice(1, keys.length), value);\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t};\r\n\r\n\tformToObject.prototype.setFormObj = function(){\r\n\r\n\t\tvar test, i = 0;\r\n\r\n\t\tfor(i = 0; i < this.$formElements.length; i++){\r\n\t\t\t// Ignore the element if the 'name' attribute is empty.\r\n\t\t\t// Ignore the 'disabled' elements.\r\n\t\t\tif( this.$formElements[i].name && !this.$formElements[i].disabled ) {\r\n\t\t\t\ttest = this.$formElements[i].name.match( this.keyRegex );\r\n\t\t\t\tthis.addChild( this.formObj, this.$formElements[i], test, this.$formElements[i].value );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.formObj;\r\n\r\n\t}\r\n\r\n\t// AMD/requirejs: Define the module\r\n\tif( typeof define === 'function' && define.amd ) {\r\n\t\tdefine(function () {\r\n\t\t\treturn formToObject;\r\n\t\t});\r\n\t}\r\n\t// Browser: Expose to window\r\n\telse {\r\n\t\twindow.formToObject = formToObject;\r\n\t}\r\n\r\n})();\r\n"],"sourceRoot":"/source/"}